Guest Access To Host IP Stack - The TCPIP (X'75') Instruction
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Introduction
============

Around 2002 Jason Winter developed a Hercules extension allowing the guest OS to access the
IP stack of the host OS by means of a special instruction that does not exist on real
S/3x0, ESA/390 or z/Architecture hardware. The operation is in RX format, its operation
code is X'75':

75rxbddd - TCPIP R1,D2(X2,B2) R1=GPR 0-15, B2=GPR 5-13, X2=GPR 0,5-13

As opposed to "classic" instructions the TCPIP (X'75') instruction preserves a state
between calls, an essential requirement to transfer IP traffic back and forth between the
host and the guest. Due to this fact, setting up for native execution of the instruction is
complex.

To avoid having application programmers go through this complexity, at the time of this
writing two higher-level interfaces are available, allowing easy and standardized access to
the functionality provided by the TCPIP instruction:

- A socket API in Jason's JCC-Library, which provides the well-known C socket
  programming functions. See the JCC-Library help in the JCC distribution (found in
  TK4-.JASON.JCC.ZIP on TK4- systems) for a description of the functions available.

- TCP/IP for MVS 3.8 Assembler by Shelby Beach, a programming interface that is source
  code compatible to IBM's well-known EZASMI API. A comprehensive documentation of all
  available functions is part of the installer found at TK4-.SHELBY.EZASMI.V100.ZIP on
  TK4- systems.

Caution: The TCPIP instruction gives a guest program the very same access to the host's IP
-------- stack that the host process running the Hercules instance has. Allowing every
         guest program this type of access may be undesirable, particularly when the
         Hercules process runs using elevated privileges. In addition, one guest program
         can easily interfere with IP communications of any other guest program by
         hijacking the other program's socket identifiers. In sum, a malicious user with
         access to the TCPIP instruction can severely compromise the guest's and the
         host's integrity. A problem state instruction with this type of capabilities
         clearly does not comply with parts specifications of the architectures emulated
         by Hercules.

         To allow users to overcome these weaknesses of the TCPIP instruction, its
         implementation on SDL Hyperion comes in two flavors: As a supervisor state and as
         a problem state instruction, both of which are functionality wise identical.
         Enabling the TCPIP instruction will default to the supervisor state instruction.
         That way, only programs running in supervisor state can execute the instruction,
         which is considered being compliant with the emulated architectures.

         Note that both TCPIP APIs currently existing for S/370 operating systems (C
         socket library and EZASMI) rely on the instruction being available in problem
         state, which is not architecture compliant. Using the problem state flavor of the
         instruction is at the user's sole risk.

         Note also, that currently no software exists that would be able to make use of
         the supervisor state flavor of the TCPIP instruction in a controlled way.


Usage
=====

Availability and flavor of the TCPIP instruction are controlled by three elements:

1. The compile time FEATURE_TCPIP_EXTENSION definition: To allow enabling of the TCPIP
   instruction, the featxxx.h header file corresponding to the relevant architecture(s)
   must contain the statement

   #define FEATURE_TCPIP_EXTENSION

   As shipped, SDL Hyperion has this feature defined for the S/370 architecture
   (feat370.h) only.

2. By default, the TCPIP instruction is at run time disabled, regardless whether the
   compile time FEATURE_TCPIP_EXTENSION was defined or not. If FEATURE_TCPIP_EXTENSION
   was defined for the architecture being currently in use, the supervisor state flavor
   of the TCPIP instruction can be enabled by issuing the command

   facility enable HERC_TCPIP_EXTENSION

   before IPLing the operating system.

3. If the problem state flavor of the TCPIP instruction is desired, after having
   enabled the supervisor state flavor as described above, the command

   facility enable HERC_TCPIP_PROB_STATE

   must be issued before IPLing the operating system.


Copyright
=========

See the comment headers of the x75.c and tcpip.c programs for copyright information.
