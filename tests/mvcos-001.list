ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page     1

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                             2 *Testcase mvsos001:   MVCOS
                                                                             3 * Created and placed into the public domain
                                                                             4 * 27 JAN 2021 by Bob Polmanter.
                                                                             5 ***********************************************************************
                                                                             6 *
                                                                             7 * These tests and this programming were validated on a z114 using a
                                                                             8 * z/VM 6.4 virtual machine on 27 January 2021.
                                                                             9 *
                                                                            10 ***********************************************************************
                                                                            11 *
                                                                            12 * Tests performed with MVCOS:
                                                                            13 *
                                                                            14 * 1.  Execute the MVCOS instruction iteratively, each time trying a
                                                                            15 *     different combination of machine state, address space control
                                                                            16 *     mode, MVCOS operand 1 control modes, MVCOS operand 2 control
                                                                            17 *     modes, and key enablement in both operand 1 and then operand 2.
                                                                            18 *     These individual tests are nested in a series of loops, so that
                                                                            19 *     each state or mode is tested with each other combination of
                                                                            20 *     states or modes in an exhaustive way.  A visual description of
                                                                            21 *     the nested loops and their related tests is shown below.
                                                                            22 *
                                                                            23 *     After execution of each MVCOS instruction, the results of the
                                                                            24 *     actual data moved are checked to determine if the data fetched
                                                                            25 *     indeed came from the specified address space, and if the data
                                                                            26 *     stored was indeed placed into the specified address space, as
                                                                            27 *     determined by the settings in R0 for operand 2 and operand 1,
                                                                            28 *     respectively.
                                                                            29 *
                                                                            30 * Upon success this is the number of tests performed:
                                                                            31 *   Successfully completed MVCOS executions:             384
                                                                            32 *   Expected protection check events:                  1,152
                                                                            33 *   Expected special operation exception events:          92
                                                                            34 *   TOTAL TESTS:                                       1,328
                                                                            35 *
                                                                            36 * Test Success:   Disabled Wait PSW X'000'
                                                                            37 * Test Failure:   Disabled Wait PSW X'BAD'
                                                                            38 *
                                                                            39 * Unexpected program check:  Disabled Wait PSW X'00F'
                                                                            40 *
                                                                            41 *
                                                                            42 * The expected protection checks arise from enabling key controlled
                                                                            43 * protection in register 0 as specified by the instruction. Keys
                                                                            44 * have been deliberately set to allow some accesses and to fail some
                                                                            45 * access attempts. Because either MVCOS operands (or both) could be
                                                                            46 * using a failing key, there is more of these failures, whereas
                                                                            47 * success requires both operands to have the right key setting.
                                                                            48 *
                                                                            49 * The expected special operation exceptions arise when the Home
                                                                            50 * address space control mode is selected in Register 0 -AND- the
                                                                            51 * PSW is in the problem state. This applies to operand 1 OAC only.
                                                                            52 * This tests that MVCOS is honoring that specification as documented
                                                                            53 * in the Principles.
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page     2

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                            54 *
                                                                            55 **********************************************************************
                                                                            56 *
                                                                            57 * TEST METHOD
                                                                            58 *
                                                                            59 * 1. Setup.
                                                                            60 * Three address spaces are created: Primary, Secondary, and Home.
                                                                            61 * Literals are placed into a page frame beloning to each one of the
                                                                            62 * address spaces identifying them by PRI, SEC, and HOM. Those pages
                                                                            63 * are the targets of MVCOS operand 1.  A second set of
                                                                            64 * literals is placed into another page frame belonging to each
                                                                            65 * one of the address spaces identifying them also as FROMPRI, FROMSEC,
                                                                            66 * and FROMHOM. These pages are fetched by MVCOS operand 2.
                                                                            67 *
                                                                            68 * The literals in the target page frames of each address space are
                                                                            69 * located at virtual 00010FF0 in each space.
                                                                            70 *
                                                                            71 * The literals in the 'from' page frames of each address space are
                                                                            72 * located at virtual 00012FF8 in each space.
                                                                            73 *
                                                                            74 * The locations are set to cause MVCOS to move data across page
                                                                            75 * boundaries.
                                                                            76 *
                                                                            77 * The nested loops are entered to set the register 0 MVCOS controls.
                                                                            78 *
                                                                            79 * 2. Executing MVCOS.
                                                                            80 *
                                                                            81 * A FROM literal is moved to the target page by MVCOS. The address
                                                                            82 * space fetched from and the address space target are of course
                                                                            83 * determined by the MVCOS controls in Register 0.
                                                                            84 *
                                                                            85 *
                                                                            86 * 3. Validation.
                                                                            87 * After the MVCOS, the register 0 controls are extracted and used
                                                                            88 * to determine programatically which address space literal was
                                                                            89 * requested to be moved to which target, and the results are compared
                                                                            90 * to determine if those literals are actually where they are supposed
                                                                            91 * to be.
                                                                            92 *
                                                                            93 * After successful validation, the original placement of the literals
                                                                            94 * is restored, and the next loop iteration advances to the next test.
                                                                            95 *
                                                                            96 **********************************************************************
                                                                            97 *
                                                                            98 * DEBUGGING THIS TEST PROGRAM
                                                                            99 *
                                                                           100 * If any MVCOS test fails (data from the specified address space is
                                                                           101 * not identified as expected), the machine will be halted to preserve
                                                                           102 * results and a disabled wait PSW of X'BAD' will be loaded. Use
                                                                           103 * register 0 and the address space control value in byte PSWASC to
                                                                           104 * determine what should have been moved to where.  View the literals
                                                                           105 * at virtual location X'00010FF0' to determine which space you are
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page     3

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           106 * viewing and what FROM literal was actually  moved to that space.
                                                                           107 * Compare that to the R0 controls and PSWASC mode to validate whether
                                                                           108 * MVCOS moved correctly.  You can also use the memory map listed
                                                                           109 * below to view the real pages by address to inspect the literals in
                                                                           110 * each address space.
                                                                           111 *
                                                                           112 * If an unexpected program check occurs, the PSW will be loaded with
                                                                           113 * a disabled wait code X'00F'. The machine is halted immediately
                                                                           114 * upon occurance and no registers are altered; hence their values
                                                                           115 * reflect the state of the failure.
                                                                           116 *
                                                                           117 *
                                                                           118 ***********************************************************************
                                                                           119 *
                                                                           120 * Memory Map - REAL STORAGE
                                                                           121 *
                                                                           122 *         Hex
                                                                           123 * RAddr   Len     Description
                                                                           124 * -----   ----    -----------------------------------------------------
                                                                           125 *     0   2000  - Absolute page 0 and 1
                                                                           126 *  2000   2000  - Program code
                                                                           127 *  4000   1000  - Segment table, primary space
                                                                           128 *  5000   1000  - Segment table, secondary space
                                                                           129 *  6000   1000  - Segment table, home space
                                                                           130 *  7000    800  - Page tables, primary space
                                                                           131 *  7800    800  - Page tables, secondary space
                                                                           132 *  8000    800  - Page tables, home space
                                                                           133 *  9000   1000  - Primary ASTE, DUCT, DU-AL, ALE blocks
                                                                           134 *  A000   1000  - Home ASTE block
                                                                           135 *  B000   5000  - unused; available
                                                                           136 * 10000  10000  - Pages backing Home virtual space at vaddr 10000
                                                                           137 * 20000  10000  - Pages backing Primary virtual space at vaddr 10000
                                                                           138 * 30000  10000  - Pages backing Secondary virtual space at vaddr 10000
                                                                           139 *
                                                                           140 *
                                                                           141 * Memory Map - VIRTUAL STORAGE
                                                                           142 *
                                                                           143 * VAddr   Len   Raddr Key   Description
                                                                           144 * -----   ----   ---- ---   ---------------------------------------
                                                                           145 * 00000  10000  00000  00 - Common V=R storage (all address spaces)
                                                                           146 * 10000  10000  10000  00 - Home space storage
                                                                           147 * 10000  10000  20000  40 - Primary space storage
                                                                           148 * 10000  10000  30000  80 - Secondary space storage
                                                                           149 *
                                                                           150 *
                                                                           151 * IN EACH ADDRESS SPACE:
                                                                           152 *
                                                                           153 * VADDR 10FF0 length 32:  Literal identifying the space target
                                                                           154 *                          (e.g., CL16'PRI-PG1',CL16'PRI-PG2'
                                                                           155 *
                                                                           156 * VADDR 12FF8 length 16:  Literal identifying the space source
                                                                           157 *                          (e.g., CL16'FROMPRI1FROMPRI2'
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page     4

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           158 *
                                                                           159 * After a successful MVCOS, the storage at location 10FF0 would look
                                                                           160 * like this example with a move from secondary to primary:
                                                                           161 *
                                                                           162 * VADDR 10FF0   CL32'PRI-PG1FROMSEC1FROMSEC2        '
                                                                           163 *
                                                                           164 * thus showing that the target area is still named PRI,and the data
                                                                           165 * came from two pages in the secondary space.
                                                                           166 *
                                                                           167 *
                                                                           168 ***********************************************************************
                                                                           169 *
                                                                           170 *
                                                                           171 * VISUAL DESCRIPTION OF NESTED LOOP TESTS
                                                                           172 *
                                                                           173 * The sequence of loops nested below allows each combination to be
                                                                           174 * tested one at a time.  OAC1 and OAC2 are the Operand Access
                                                                           175 * Control 1 and 2, respectively, in Register 0 that control MVCOS.
                                                                           176 *
                                                                           177 * Loop  iterations  Description
                                                                           178 *   1        2      Supervisor state, then problem state
                                                                           179 *   2        4      Cycle through each PSW ASC mode P,AR,S,H
                                                                           180 *   3        2      OAC1 A validity bit off, then on
                                                                           181 *   4        4      When OAC1 A=1, cycle through each ASC mode in OAC1
                                                                           182 *   5        3      When OAC1 A=1 & OAC1 is AR, cycle ALETs 0,1,2 oper1
                                                                           183 *   6        2      OAC2 A validity bit off, then on
                                                                           184 *   7        4      When OAC2 A=1, cycle through each ASC mode in OAC2
                                                                           185 *   8        3      When OAC2 A=1 & OAC2 is AR, cycle ALETs 0,1,2 oper2
                                                                           186 *   9        2      OAC1 K validity bit off, then on
                                                                           187 *  10        2      OAC2 K validity bit off, then on
                                                                           188 *
                                                                           189 *                   Execute MVCOS
                                                                           190 *
                                                                           191 *                   Check results; PSW=X'BAD' if failed
                                                                           192 *                   Next loop 10
                                                                           193 *                   Next loop 9
                                                                           194 *                   Next loop 8
                                                                           195 *                   Next loop 7
                                                                           196 *                   Next loop 6
                                                                           197 *                   Next loop 5
                                                                           198 *                   Next loop 4
                                                                           199 *                   Next loop 3
                                                                           200 *                   Next loop 2
                                                                           201 *                   Next loop 1
                                                                           202 *                   Terminate with success, PSW=X'001'
                                                                           203 *
                                                                           204 * Note on loop 4 & 7: when either OAC A validity bit is 0, then the
                                                                           205 * PSW ASC mode is used by MVCOS and the iteration count is 1.
                                                                           206 *
                                                                           207 * Note on loop 5 & 8: when either OAC A validity bit is 0 -AND- the
                                                                           208 * PSW ASC mode is P,S,or H, then the PSW ASC mode is used by MVCOS and
                                                                           209 * the iteration count is 1.  However, if the PSW ASC mode is AR, then
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page     5

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           210 * the iteration count remains 3 for these loops so the ALETs can be
                                                                           211 * cycled through each test for each operand 1 or operand 2, in turn.
                                                                           212 *
                                                                           213 ***********************************************************************
                                                                           214 *
                                                                           215 *
                                      0000000000000000  000000000000A03F   216 MVCOS001 START 0
                                      0000000000000000  0000000000000001   217 STRTLABL EQU   *
                                      0000000000000000  0000000000000001   218 R0       EQU   0
                                      0000000000000001  0000000000000001   219 R1       EQU   1
                                      0000000000000002  0000000000000001   220 R2       EQU   2
                                      0000000000000003  0000000000000001   221 R3       EQU   3
                                      0000000000000004  0000000000000001   222 R4       EQU   4
                                      0000000000000005  0000000000000001   223 R5       EQU   5
                                      0000000000000006  0000000000000001   224 R6       EQU   6
                                      0000000000000007  0000000000000001   225 R7       EQU   7
                                      0000000000000008  0000000000000001   226 R8       EQU   8
                                      0000000000000009  0000000000000001   227 R9       EQU   9
                                      000000000000000A  0000000000000001   228 R10      EQU   10
                                      000000000000000B  0000000000000001   229 R11      EQU   11
                                      000000000000000C  0000000000000001   230 R12      EQU   12
                                      000000000000000D  0000000000000001   231 R13      EQU   13
                                      000000000000000E  0000000000000001   232 R14      EQU   14
                                      000000000000000F  0000000000000001   233 R15      EQU   15
                                                                           234 *
                                                                           235 *
0000000000000000                      0000000000000000                     236          USING STRTLABL,0
                                                                           237 *
                                                                           238 * Selected z/Arch low core layout
                                                                           239 *
0000000000000000                      0000000000000000  0000000000000088   240          ORG   STRTLABL+X'88'      interrupt code area EC mode
0000000000000088  00000000                                                 241 SVCINTC  DC    X'00000000'         SVC interrupt code area
000000000000008C  00000000                                                 242 PGMINTC  DC    X'00000000'         Prog check interrupt code area
                                                                           243 *
0000000000000090                      0000000000000090  0000000000000140   244          ORG   STRTLABL+X'140'
0000000000000140  00000000 00000000                                        245 SVCOPSW  DS    XL16                SVC old PSW
0000000000000150  00000000 00000000                                        246 PGMOPSW  DS    XL16                Program check old PSW
                                                                           247 *
0000000000000160                      0000000000000160  00000000000001A0   248          ORG   STRTLABL+X'1A0'     New PSWs
00000000000001A0  00000000 80000000                                        249 RESTART  DC    X'00000000',X'80000000',A(0),A(START)    DAT OFF
00000000000001B0  00000000 00000000                                        250 EXTNPSW  DC    XL16'00'
00000000000001C0  04004000 80000000                                        251 SVCNPSW  DC    X'04004000',X'80000000',A(0),A(SVCFLIH)  DAT ON, AR MODE
00000000000001D0  04004000 80000000                                        252 PGMNPSW  DC    X'04004000',X'80000000',A(0),A(PGMFLIH)  DAT ON, AR MODE
                                                                           253 *
00000000000001E0                      00000000000001E0  0000000000000200   254          ORG   STRTLABL+X'200'     Test counters
0000000000000200  0000000C                                                 255 MVCOSOK  DC    PL4'0'               # of successful tests
0000000000000204  0000000C                                                 256 PIC04    DC    PL4'0'               # of Pchecks 04
0000000000000208  0000000C                                                 257 PIC13    DC    PL4'0'               # of Pchecks 13
000000000000020C  00000000                                                 258          DS    F
                                                                           259 *
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page     6

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           261 ***********************************************************************
                                                                           262 *
                                                                           263 *  Main program.
                                                                           264 *
0000000000000210                      0000000000000210  0000000000002000   265          ORG   STRTLABL+X'2000'
0000000000002000                                                           266 START    DS    0H
0000000000002000  0DF0                                                     267          BASR  R15,0
0000000000002002  06F0                                                     268          BCTR  R15,0
0000000000002004  06F0                                                     269          BCTR  R15,0
0000000000002006                      0000000000002000                     270          USING START,R15
                                                                           271 *
0000000000002006  1B22                                                     272          SR    R2,R2                   STATUS REG SET TO 0
0000000000002008  4130 0001                             0000000000000001   273          LA    R3,1                    R3=1 MEANS SET Z/ARCH MODE
                                                                           274 *                                      R3=0 MEANS SET ESA/390 MODE
000000000000200C  1B44                                                     275          SR    R4,R4                   CPU Addr = 0
000000000000200E  AE24 0012                             0000000000000012   276          SIGP  2,4,X'12'               X'12' = SET ARCHITECTURE
                                                                           277 *
0000000000002012  4100 0008                             0000000000000008   278          LA    R0,X'08'                Set KEY=0 fetch prot enabled
0000000000002016  4120 0040                             0000000000000040   279          LA    R2,64                   # of real pages to set
000000000000201A  1B11                                                     280          SR    R1,R1                   Starting addr
                                                                           281 *
                                      000000000000201C  0000000000000001   282 SET000   EQU   *
000000000000201C  B22B 0001                                                283          SSKE  R0,R1                   Set the key
0000000000002020  A71A 1000                                                284          AHI   R1,4096                 Bump to next page
0000000000002024  4620 F01C                             000000000000201C   285          BCT   R2,SET000
                                                                           286 *
0000000000002028  9A0F F4F8                             00000000000024F8   287          LAM   0,15,AR0                Clear all ARs
000000000000202C  EB0F F478 002F                        0000000000002478   288          LCTLG 0,15,CR0                Load all the CRs
0000000000002032  8000 F3B4                             00000000000023B4   289          SSM   =X'04'                  Turn on DAT
                                                                           290 *
0000000000002036  5850 F544                             0000000000002544   291          L     R5,VADDRTO              Get vaddr in 1st virtual page
000000000000203A  5860 F548                             0000000000002548   292          L     R6,VADDRFRM             Copy
                                                                           293 *
000000000000203E  D21F 5000 F3B8      0000000000000000  00000000000023B8   294          MVC   0(32,R5),PRIPG1         Set literal identifier in pages
0000000000002044  D20F 6000 F418      0000000000000000  0000000000002418   295          MVC   0(16,R6),FROMPRI        Set literal identifier in pages
                                                                           296 *
000000000000204A  B219 0100                             0000000000000100   297          SAC   256                     Secondary mode
000000000000204E  D21F 5000 F3D8      0000000000000000  00000000000023D8   298          MVC   0(32,R5),SECPG1         Set literal identifier in pages
0000000000002054  D20F 6000 F428      0000000000000000  0000000000002428   299          MVC   0(16,R6),FROMSEC        Set literal identifier in pages
                                                                           300 *
000000000000205A  B219 0300                             0000000000000300   301          SAC   768                     Home space mode
000000000000205E  D21F 5000 F3F8      0000000000000000  00000000000023F8   302          MVC   0(32,R5),HOMPG1         Set literal identifier in pages
0000000000002064  D20F 6000 F438      0000000000000000  0000000000002438   303          MVC   0(16,R6),FROMHOM        Set literal identifier in pages
                                                                           304 *
000000000000206A  B219 0200                             0000000000000200   305          SAC   512                     Enter AR mode
000000000000206E  5800 F344                             0000000000002344   306          L     R0,=X'10031003'         Initialize MVCOS controls; on
                                                                           307 *                                       first pass below this will be
                                                                           308 *                                       set to X'00000000' for 1st test
0000000000002072  920C F561                             0000000000002561   309          MVI   PSWASC,X'0C'            Initialize PSW ASC ctl byte; on
                                                                           310 *                                       first pass below this will be
                                                                           311 *                                       set to X'00' (PRI) for 1st test
0000000000002076  9201 F560                             0000000000002560   312          MVI   PSWSTATE,X'01'          Initialize PSW state control; on
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page     7

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           313 *                                       first pass below this will be
                                                                           314 *                                       set to X'00',SUPRV for 1st test
                                                                           315 *
                                                                           316 *
                                                                           317 *
                                                                           318 *
000000000000207A  41E0 0002                             0000000000000002   319          LA    R14,2                   # of PSW state tests
                                      000000000000207E  0000000000000001   320 STATE000 EQU   *
000000000000207E  9701 F560                             0000000000002560   321          XI    PSWSTATE,X'01'          Flip current PSW state ctl byte
0000000000002082  4310 F560                             0000000000002560   322          IC    R1,PSWSTATE             Get new state ctl byte
0000000000002086  4410 F08E                             000000000000208E   323          EX    R1,SVCSTATE             Flip to next PSW state
000000000000208A  47F0 F090                             0000000000002090   324          B     ASC000                  Continue test prep
                                                                           325 *
000000000000208E  0A00                                                     326 SVCSTATE SVC   0                       Executed instruction
                                                                           327 *
                                                                           328 *
                                      0000000000002090  0000000000000001   329 ASC000   EQU   *
0000000000002090  41D0 0004                             0000000000000004   330          LA    R13,4                   # of PSW ASC tests
                                                                           331 *
                                      0000000000002094  0000000000000001   332 ASC010   EQU   *
0000000000002094  4310 F561                             0000000000002561   333          IC    R1,PSWASC               Get last mode used
0000000000002098  4110 1004                             0000000000000004   334          LA    R1,X'04'(,R1)           Increment bit 5 to next ASC mode
000000000000209C  5410 F348                             0000000000002348   335          N     R1,=X'0000000C'         Keep only bits 4 and 5
00000000000020A0  4210 F561                             0000000000002561   336          STC   R1,PSWASC               Set new mode to use
                                                                           337 *
00000000000020A4  41C0 0002                             0000000000000002   338          LA    R12,2                   # From A validity tests
                                      00000000000020A8  0000000000000001   339 TOA000   EQU   *
00000000000020A8  1810                                                     340          LR    R1,R0                   Copy control bits
00000000000020AA  5410 F34C                             000000000000234C   341          N     R1,=A(OAC1A)            Keep only bits we want
00000000000020AE  5710 F34C                             000000000000234C   342          X     R1,=A(OAC1A)            Flip these bits
00000000000020B2  5400 F350                             0000000000002350   343          N     R0,=A(X'FFFFFFFF'-OAC1A) Force these bits off
00000000000020B6  1601                                                     344          OR    R0,R1                   Set ctl based on flip results
00000000000020B8  5400 F354                             0000000000002354   345          N     R0,=A(X'FFFFFFFF'-(ASCHOM*65536)) Force bits off in OAC1
00000000000020BC  41B0 0001                             0000000000000001   346          LA    R11,1                   Assume 1 test if A=0 (using PSW)
00000000000020C0  A700 0001                                                347          TMLH  R0,ASCA                 Was A set on or off?
00000000000020C4  4780 F0FE                             00000000000020FE   348          BZ    TOAS200                 A is off, use PSW ASC
                                                                           349 *
                                                                           350 *                                      A=1: rotate thru OAC1AS modes
00000000000020C8  5600 F358                             0000000000002358   351          O     R0,=A(ASCHOM*65536)     Force on; will wrap to 00 next
00000000000020CC  41B0 0004                             0000000000000004   352          LA    R11,4                   4 test to rotate thru OAC1 ASCs
                                                                           353 *
                                      00000000000020D0  0000000000000001   354 TOAS000  EQU   *
00000000000020D0  A700 0001                                                355          TMLH  R0,ASCA                 Was A set on or off?
00000000000020D4  4780 F0FE                             00000000000020FE   356          BZ    TOAS200                 A is off, use PSW ASC
                                                                           357 *
                                      00000000000020D8  0000000000000001   358 TOAS020  EQU   *                       A is on, do OAC1 AS changes
00000000000020D8  1810                                                     359          LR    R1,R0                   Copy control bits
00000000000020DA  5A10 F35C                             000000000000235C   360          A     R1,=X'00400000'         Increment bit to next ASC mode
00000000000020DE  5410 F358                             0000000000002358   361          N     R1,=A(ASCHOM*65536)     Keep only the bits we want
00000000000020E2  5400 F354                             0000000000002354   362          N     R0,=A(X'FFFFFFFF'-(ASCHOM*65536)) Force bits off in OAC1
00000000000020E6  1601                                                     363          OR    R0,R1                   Set ctl based on flip results
                                                                           364 *
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page     8

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000020E8  41A0 0001                             0000000000000001   365          LA    R10,1                   1 test required if ASC is P,S,H
00000000000020EC  1810                                                     366          LR    R1,R0                   Copy control bits
00000000000020EE  5410 F360                             0000000000002360   367          N     R1,=A(OAC1A+ASCHOM*65536) Keep only these bits
00000000000020F2  5510 F364                             0000000000002364   368          CL    R1,=A(OAC1A+ASCAR*65536) Using MVCOS control AR mode?
00000000000020F6  4770 F128                             0000000000002128   369          BNE   TOAS290                 No. Use 1 test in R10 for P,S,H
00000000000020FA  47F0 F10A                             000000000000210A   370          B     TOAS210                 Yes. 3 tests in R10 for AR
                                                                           371 *
                                      00000000000020FE  0000000000000001   372 TOAS200  EQU   *
00000000000020FE  41A0 0001                             0000000000000001   373          LA    R10,1                   1 test required if PSW is P,S,H
0000000000002102  9504 F561                             0000000000002561   374          CLI   PSWASC,X'04'            Using ASC=AR ?
0000000000002106  4770 F128                             0000000000002128   375          BNE   TOAS290                 No. only 1 test per ASC mode
                                                                           376 *
                                      000000000000210A  0000000000000001   377 TOAS210  EQU   *
000000000000210A  41A0 0003                             0000000000000003   378          LA    R10,3                   3 tests required for ASC=AR
                                                                           379 *
                                      000000000000210E  0000000000000001   380 TOAS220  EQU   *
000000000000210E  5810 F540                             0000000000002540   381          L     R1,TALET                Get from ALET
0000000000002112  B24E 0051                                                382          SAR   5,R1                    Set in from AR
0000000000002116  4110 1001                             0000000000000001   383          LA    R1,1(,R1)               Bump ALET
000000000000211A  5910 F368                             0000000000002368   384          C     R1,=F'3'                Exceeded max of 2?
000000000000211E  4740 F124                             0000000000002124   385          BL    TOAS230                 No
0000000000002122  1B11                                                     386          SR    R1,R1                   Restart back at ALET 0
                                                                           387 *
                                      0000000000002124  0000000000000001   388 TOAS230  EQU   *
0000000000002124  5010 F540                             0000000000002540   389          ST    R1,TALET                Save updated ALET
                                                                           390 *
                                      0000000000002128  0000000000000001   391 TOAS290  EQU   *
                                                                           392 *
0000000000002128  4190 0002                             0000000000000002   393          LA    R9,2                    # From A validity tests
                                      000000000000212C  0000000000000001   394 FRMA000  EQU   *
000000000000212C  1810                                                     395          LR    R1,R0                   Copy control bits
000000000000212E  5410 F36C                             000000000000236C   396          N     R1,=A(OAC2A)            Keep only bits we want
0000000000002132  5710 F36C                             000000000000236C   397          X     R1,=A(OAC2A)            Flip these bits
0000000000002136  5400 F370                             0000000000002370   398          N     R0,=A(X'FFFFFFFF'-OAC2A) Force these bits off
000000000000213A  1601                                                     399          OR    R0,R1                   Set ctl based on flip results
000000000000213C  5400 F374                             0000000000002374   400          N     R0,=A(X'FFFFFFFF'-ASCHOM) Force these bits off in OAC2
0000000000002140  4180 0001                             0000000000000001   401          LA    R8,1                    Assume 1 test if A=0 (using PSW)
0000000000002144  A701 0001                                                402          TMLL  R0,ASCA                 Was A set on or off?
0000000000002148  4780 F182                             0000000000002182   403          BZ    FRMAS200                A is off, use PSW ASC
                                                                           404 *
                                                                           405 *                                      A=1: rotate thru OAC2AS modes
000000000000214C  5600 F378                             0000000000002378   406          O     R0,=A(ASCHOM)           Force on; will wrap to 00 next
0000000000002150  4180 0004                             0000000000000004   407          LA    R8,4                    4 test to rotate thru OAC2 ASCs
                                                                           408 *
                                      0000000000002154  0000000000000001   409 FRMAS000 EQU   *
0000000000002154  A701 0001                                                410          TMLL  R0,ASCA                 Was A set on or off?
0000000000002158  4780 F182                             0000000000002182   411          BZ    FRMAS200                A is off, use PSW ASC
                                                                           412 *
                                      000000000000215C  0000000000000001   413 FRMAS020 EQU   *                       A is on, do OAC2 AS changes
000000000000215C  1810                                                     414          LR    R1,R0                   Copy control bits
000000000000215E  4110 1040                             0000000000000040   415          LA    R1,B'01000000'(,R1)     Increment bit 1 to next ASC mode
0000000000002162  5410 F378                             0000000000002378   416          N     R1,=A(ASCHOM)           Keep only the bits we want
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page     9

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000002166  5400 F374                             0000000000002374   417          N     R0,=A(X'FFFFFFFF'-ASCHOM) Force these bits off in OAC2
000000000000216A  1601                                                     418          OR    R0,R1                   Set ctl based on flip results
                                                                           419 *
000000000000216C  4170 0001                             0000000000000001   420          LA    R7,1                    1 test required if ASC is P,S,H
0000000000002170  1810                                                     421          LR    R1,R0                   Copy control bits
0000000000002172  5410 F37C                             000000000000237C   422          N     R1,=A(OAC2A+ASCHOM)     Keep only these bits
0000000000002176  5510 F380                             0000000000002380   423          CL    R1,=A(OAC2A+ASCAR)      Using MVCOS control AR mode?
000000000000217A  4770 F1AC                             00000000000021AC   424          BNE   FRMAS290                No. Use 1 test in R7 for P,S,H
000000000000217E  47F0 F18E                             000000000000218E   425          B     FRMAS210                Yes. 3 tests in R7 for AR
                                                                           426 *
                                      0000000000002182  0000000000000001   427 FRMAS200 EQU   *
0000000000002182  4170 0001                             0000000000000001   428          LA    R7,1                    1 test required if PSW is P,S,H
0000000000002186  9504 F561                             0000000000002561   429          CLI   PSWASC,X'04'            Using ASC=AR ?
000000000000218A  4770 F1AC                             00000000000021AC   430          BNE   FRMAS290                No. only 1 test per ASC mode
                                                                           431 *
                                      000000000000218E  0000000000000001   432 FRMAS210 EQU   *
000000000000218E  4170 0003                             0000000000000003   433          LA    R7,3                    3 tests required for ASC=AR
                                                                           434 *
                                      0000000000002192  0000000000000001   435 FRMAS220 EQU   *
0000000000002192  5810 F53C                             000000000000253C   436          L     R1,FALET                Get from ALET
0000000000002196  B24E 0061                                                437          SAR   6,R1                    Set in from AR
000000000000219A  4110 1001                             0000000000000001   438          LA    R1,1(,R1)               Bump ALET
000000000000219E  5910 F368                             0000000000002368   439          C     R1,=F'3'                Exceeded max of 2?
00000000000021A2  4740 F1A8                             00000000000021A8   440          BL    FRMAS230                No
00000000000021A6  1B11                                                     441          SR    R1,R1                   Restart back at ALET 0
                                                                           442 *
                                      00000000000021A8  0000000000000001   443 FRMAS230 EQU   *
00000000000021A8  5010 F53C                             000000000000253C   444          ST    R1,FALET                Save updated ALET
                                                                           445 *
                                      00000000000021AC  0000000000000001   446 FRMAS290 EQU   *
                                                                           447 *
00000000000021AC  4140 0002                             0000000000000002   448          LA    R4,2                    # To Key tests
                                      00000000000021B0  0000000000000001   449 TKEY000  EQU   *                       To Key
00000000000021B0  1810                                                     450          LR    R1,R0                   Copy control bits
00000000000021B2  5410 F384                             0000000000002384   451          N     R1,=A(OAC1KEY+OAC1K)    Keep only bits we want
00000000000021B6  5710 F384                             0000000000002384   452          X     R1,=A(OAC1KEY+OAC1K)    Flip these bits
00000000000021BA  5400 F388                             0000000000002388   453          N     R0,=A(X'FFFFFFFF'-OAC1KEY-OAC1K) Force these bits off
00000000000021BE  1601                                                     454          OR    R0,R1                   Set ctl based on flip results
                                                                           455 *
00000000000021C0  4130 0002                             0000000000000002   456          LA    R3,2                    # From Key tests
                                      00000000000021C4  0000000000000001   457 FKEY000  EQU   *                       From Key
00000000000021C4  1810                                                     458          LR    R1,R0                   Copy control bits
00000000000021C6  5410 F38C                             000000000000238C   459          N     R1,=A(OAC2KEY+OAC2K)    Keep only bits we want
00000000000021CA  5710 F38C                             000000000000238C   460          X     R1,=A(OAC2KEY+OAC2K)    Flip these bits
00000000000021CE  5400 F390                             0000000000002390   461          N     R0,=A(X'FFFFFFFF'-OAC2KEY-OAC2K) Force these bits off
00000000000021D2  1601                                                     462          OR    R0,R1                   Set ctl based on flip results
                                                                           463 *
                                                                           464 *
                                      00000000000021D4  0000000000000001   465 BEGIN000 EQU   *
00000000000021D4  1B22                                                     466          SR    R2,R2                   Clear for ICM
00000000000021D6  4320 F561                             0000000000002561   467          IC    R2,PSWASC               Get ASC we need to test
00000000000021DA  9101 008B                             000000000000008B   468          TM    SVCINTC+3,X'01'         Are we in problem state?
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    10

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000021DE  4780 F1EA                             00000000000021EA   469          BZ    BEGIN010                No.  Do every test
00000000000021E2  BD21 F3B5                             00000000000023B5   470          CLM   R2,1,=X'0C'             Entering HOME ASC mode?
00000000000021E6  4780 F26A                             000000000000226A   471          BE    NEXTTEST                Y, not permitted in prob state
                                                                           472 *
                                      00000000000021EA  0000000000000001   473 BEGIN010 EQU   *
00000000000021EA  5812 F550                             0000000000002550   474          L     R1,SACIDX(R2)           Get corresponding SAC bits
00000000000021EE  B219 1000                             0000000000000000   475          SAC   0(R1)                   Put machine in mode we need
                                                                           476 *
00000000000021F2  4110 0010                             0000000000000010   477          LA    R1,16                   Length to move
00000000000021F6  C810 5008 6000      0000000000000008  0000000000000000   478          MVCOS 8(R5),0(R6),R1
                                      00000000000021FC  0000000000000001   479 MVCOS    EQU   *                       Addr after the instruction
                                                                           480
                                                                           481 *
                                                                           482 *-- Check results
                                                                           483 *
                                      00000000000021FC  0000000000000001   484 CHK000   EQU   *
00000000000021FC  B219 0200                             0000000000000200   485          SAC   512                     Resume AR mode
0000000000002200  1B11                                                     486          SR    R1,R1                   Clear for IC
0000000000002202  4310 F561                             0000000000002561   487          IC    R1,PSWASC               Get PSW ASC mode bits
0000000000002206  A700 0001                                                488          TMLH  R0,ASCA                 Is AS setting in OAC1 valid?
000000000000220A  4780 F218                             0000000000002218   489          BZ    CHK010                  No, use the PSW ASC in R1
000000000000220E  1810                                                     490          LR    R1,R0                   Copy current setting
0000000000002210  5410 F394                             0000000000002394   491          N     R1,=X'00C00000'         Keep OAC1 AS bits
0000000000002214  8810 0014                             0000000000000014   492          SRL   R1,20                   Make AS value a 4-byte index
                                                                           493 *
                                      0000000000002218  0000000000000001   494 CHK010   EQU   *
0000000000002218  4401 F298                             0000000000002298   495          EX    R0,SETAR(R1)            Set AR1 to access the right AS
000000000000221C  5810 F544                             0000000000002544   496          L     R1,VADDRTO              -> literal target area
                                                                           497 *
0000000000002220  1B22                                                     498          SR    R2,R2                   Clear for IC
0000000000002222  4320 F561                             0000000000002561   499          IC    R2,PSWASC               Get PSW ASC mode bits
0000000000002226  A701 0001                                                500          TMLL  R0,ASCA                 Is AS setting in OAC2 valid?
000000000000222A  4780 F238                             0000000000002238   501          BZ    CHK020                  No, use the PSW ASC in R2
                                                                           502 *
000000000000222E  1820                                                     503          LR    R2,R0                   Copy current setting
0000000000002230  5420 F398                             0000000000002398   504          N     R2,=X'000000C0'         Keep OAC2 AS bits
0000000000002234  8820 0004                             0000000000000004   505          SRL   R2,4                    Make AS value a 4-byte index
                                                                           506 *
                                      0000000000002238  0000000000000001   507 CHK020   EQU   *
0000000000002238  4402 F2A8                             00000000000022A8   508          EX    R0,GETALET(R2)          Get the MVCOS operand 2 ALET
000000000000223C  8920 0004                             0000000000000004   509          SLL   R2,4                    Multiply by 16 to make index
0000000000002240  4122 F418                             0000000000002418   510          LA    R2,FROMPRI(R2)          -> space identifier literal
                                                                           511 *
                                      0000000000002244  0000000000000001   512 CHK040   EQU   *
0000000000002244  D50F 1008 2000      0000000000000008  0000000000000000   513          CLC   8(16,R1),0(R2)          Check if MVCOS worked
000000000000224A  4780 F252                             0000000000002252   514          BE    CHK100                  TEST SUCCESS
000000000000224E  B2B2 F448                             0000000000002448   515          LPSWE TESTFAIL                Stop machine if test failed
                                                                           516 *
                                      0000000000002252  0000000000000001   517 CHK100   EQU   *
0000000000002252  FA30 0200 F3B6      0000000000000200  00000000000023B6   518          AP    MVCOSOK,=P'1'           Increment # successful tests
0000000000002258  B24F 0021                                                519          EAR   R2,1                    Get the ALET we loaded into AR1
000000000000225C  8920 0005                             0000000000000005   520          SLL   R2,5                    Multiply by 32 to make index
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    11

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000002260  4122 F3B8                             00000000000023B8   521          LA    R2,PRIPG1(R2)           -> space identifier literal
0000000000002264  D21F 1000 2000      0000000000000000  0000000000000000   522          MVC   0(32,R1),0(R2)          Restore original id literal
                                                                           523 *
                                      000000000000226A  0000000000000001   524 NEXTTEST EQU   *
                                                                           525 *
000000000000226A  4630 F1C4                             00000000000021C4   526          BCT   R3,FKEY000              Vary OAC2 K bit
000000000000226E  4640 F1B0                             00000000000021B0   527          BCT   R4,TKEY000              Vary OAC1 K bit
0000000000002272  4670 F192                             0000000000002192   528          BCT   R7,FRMAS220             Vary from ALETs when OAC2 ASC=AR
0000000000002276  4680 F154                             0000000000002154   529          BCT   R8,FRMAS000             Cycle through OAC2 ASC modes
000000000000227A  4690 F12C                             000000000000212C   530          BCT   R9,FRMA000              Vary OAC2 A bit
000000000000227E  46A0 F10E                             000000000000210E   531          BCT   R10,TOAS220             Vary To ALETs when OAC1 ASC=AR
0000000000002282  46B0 F0D0                             00000000000020D0   532          BCT   R11,TOAS000             Cycle through OAC1 ASC modes
0000000000002286  46C0 F0A8                             00000000000020A8   533          BCT   R12,TOA000              Vary OAC1 A bit
000000000000228A  46D0 F094                             0000000000002094   534          BCT   R13,ASC010              Switch to next PSW ASC mode
000000000000228E  46E0 F07E                             000000000000207E   535          BCT   R14,STATE000            Switch to next PSW state
                                                                           536 *
0000000000002292  0A00                                                     537          SVC   0                       Back to supervisor state
0000000000002294  B2B2 F458                             0000000000002458   538          LPSWE GOODPSW                 Stop on success
                                                                           539 *
                                                                           540 *
                                                                           541 *
                                                                           542 *
                                                                           543 *-- SETAR and GETALET are blocks of EXecuted instructions
                                                                           544 *
                                                                           545 *
0000000000002298  9A11 F39C                             000000000000239C   546 SETAR    LAM   1,1,=F'0'    AS=00      Primary, set ALET=0
000000000000229C  B24D 0015                                                547          CPYA  1,5             01      AR, set AR1 to MVCOS Operand 1
00000000000022A0  9A11 F3A0                             00000000000023A0   548          LAM   1,1,=F'1'       10      Secondary, set ALET=1
00000000000022A4  9A11 F3A4                             00000000000023A4   549          LAM   1,1,=F'2'       11      Home set ALET=2
                                                                           550 *
00000000000022A8  4120 0000                             0000000000000000   551 GETALET  LA    2,0          AS=00      Primary, set ALET=0
00000000000022AC  B24F 0026                                                552          EAR   2,6             01      AR, set R2 to MVCOS Operand 2 AR
00000000000022B0  4120 0001                             0000000000000001   553          LA    2,1             10      Secondary, set ALET=1
00000000000022B4  4120 0002                             0000000000000002   554          LA    2,2             11      Home set ALET=2
                                                                           555
                                                                           556 *
                                                                           557 *
                                                                           558 *
                                                                           559 * HERE FOR SVCs
                                                                           560 *
                                                                           561 * SVC 0 - Set supervisor state in PSW
                                                                           562 * SVC 1 - Set problem state in PSW
                                                                           563 *
00000000000022B8                                                           564          DS    0D
                                      00000000000022B8  0000000000000001   565 SVCFLIH  EQU   *                       SVC Interruption Routine
00000000000022B8  D200 0141 008B      0000000000000141  000000000000008B   566          MVC   SVCOPSW+1(1),SVCINTC+3  Set state based on SVC num
00000000000022BE  B2B2 0140                             0000000000000140   567          LPSWE SVCOPSW                 Resume execution
                                                                           568 *
                                                                           569 *
                                                                           570 * HERE FOR PROGRAM CHECKS
                                                                           571 *
                                                                           572 *
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    12

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000022C8                                                           573          DS    0D
                                      00000000000022C8  0000000000000001   574 PGMFLIH  EQU   *                       Program check interruptions
00000000000022C8  9513 008F                             000000000000008F   575          CLI   PGMINTC+3,X'13'         Was this a special op exception?
00000000000022CC  4780 F2FA                             00000000000022FA   576          BE    PGM13                   Yes, use microscope
00000000000022D0  9504 008F                             000000000000008F   577          CLI   PGMINTC+3,X'04'         Was this a protection exception?
00000000000022D4  4770 F33E                             000000000000233E   578          BNE   PGMSTOP                 No, stop immediate
                                                                           579 *
                                      00000000000022D8  0000000000000001   580 PGM04    EQU   *                       Examine PIC 4
00000000000022D8  5000 F538                             0000000000002538   581          ST    R0,WORK                 Save current control bits
00000000000022DC  D403 F538 F3A8      0000000000002538  00000000000023A8   582          NC    WORK,=A(OAC1K+OAC2K)    Either key validity bit = 1?
00000000000022E2  4780 F33E                             000000000000233E   583          BZ    PGMSTOP                 N, PIC 04 from something else
00000000000022E6  D503 015C F3AC      000000000000015C  00000000000023AC   584          CLC   PGMOPSW+12(4),=A(MVCOS) Was it the MVCOS that failed?
00000000000022EC  4770 F33E                             000000000000233E   585          BNE   PGMSTOP                 Nope, halt the machine
00000000000022F0  FA30 0204 F3B6      0000000000000204  00000000000023B6   586          AP    PIC04,=P'1'             Increment # successful tests
00000000000022F6  47F0 F330                             0000000000002330   587          B     PGMEXIT                 Exit FLIH
                                                                           588 *
                                      00000000000022FA  0000000000000001   589 PGM13    EQU   *
00000000000022FA  9101 008B                             000000000000008B   590          TM    SVCINTC+3,X'01'         Were we in problem state?
00000000000022FE  4780 F33E                             000000000000233E   591          BZ    PGMSTOP                 No,error! PIC 13 shouldnt happen
0000000000002302  D503 015C F3AC      000000000000015C  00000000000023AC   592          CLC   PGMOPSW+12(4),=A(MVCOS) Was it the MVCOS that failed?
0000000000002308  4770 F33E                             000000000000233E   593          BNE   PGMSTOP                 Nope, halt the machine
000000000000230C  5000 F538                             0000000000002538   594          ST    R0,WORK                 Save current control bits
0000000000002310  D403 F538 F3B0      0000000000002538  00000000000023B0   595          NC    WORK,=A(OAC1A+OAC2A)    Either Access validity bit = 1?
0000000000002316  4780 F33E                             000000000000233E   596          BZ    PGMSTOP                 N, PIC 13 from something else
000000000000231A  A700 00C0                                                597          TMLH  R0,ASCHOM               Operand 1 ASC is HOME?
000000000000231E  4710 F32A                             000000000000232A   598          BO    PGM13CT                 Yes, PIC13 is ok in prob state
0000000000002322  A701 00C0                                                599          TMLL  R0,ASCHOM               Operand 2 ASC is HOME?
0000000000002326  4780 F33E                             000000000000233E   600          BZ    PGMSTOP                 No. Something wrong
                                                                           601 *
                                      000000000000232A  0000000000000001   602 PGM13CT  EQU   *
000000000000232A  FA30 0208 F3B6      0000000000000208  00000000000023B6   603          AP    PIC13,=P'1'             Increment # successful tests
                                                                           604 *
                                      0000000000002330  0000000000000001   605 PGMEXIT  EQU   *                       Exit from FLIH everything OK
0000000000002330  9101 008B                             000000000000008B   606          TM    SVCINTC+3,X'01'         Were we in problem state?
0000000000002334  4780 F26A                             000000000000226A   607          BZ    NEXTTEST                No, proceed to next test
0000000000002338  0A01                                                     608          SVC   1                       Return to problem state
000000000000233A  47F0 F26A                             000000000000226A   609          B     NEXTTEST                And return to next test
                                                                           610 *
                                      000000000000233E  0000000000000001   611 PGMSTOP  EQU   *                       Halt if something wrong
000000000000233E  B2B2 F468                             0000000000002468   612          LPSWE HALT                    Here for unexpected prog checks
                                                                           613 *
0000000000002344                                                           614          LTORG
0000000000002344  10031003                                                 615                =X'10031003'
0000000000002348  0000000C                                                 616                =X'0000000C'
000000000000234C  00010000                                                 617                =A(OAC1A)
0000000000002350  FFFEFFFF                                                 618                =A(X'FFFFFFFF'-OAC1A)
0000000000002354  FF3FFFFF                                                 619                =A(X'FFFFFFFF'-(ASCHOM*65536))
0000000000002358  00C00000                                                 620                =A(ASCHOM*65536)
000000000000235C  00400000                                                 621                =X'00400000'
0000000000002360  00C10000                                                 622                =A(OAC1A+ASCHOM*65536)
0000000000002364  00410000                                                 623                =A(OAC1A+ASCAR*65536)
0000000000002368  00000003                                                 624                =F'3'
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    13

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000236C  00000001                                                 625                =A(OAC2A)
0000000000002370  FFFFFFFE                                                 626                =A(X'FFFFFFFF'-OAC2A)
0000000000002374  FFFFFF3F                                                 627                =A(X'FFFFFFFF'-ASCHOM)
0000000000002378  000000C0                                                 628                =A(ASCHOM)
000000000000237C  000000C1                                                 629                =A(OAC2A+ASCHOM)
0000000000002380  00000041                                                 630                =A(OAC2A+ASCAR)
0000000000002384  10020000                                                 631                =A(OAC1KEY+OAC1K)
0000000000002388  EFFDFFFF                                                 632                =A(X'FFFFFFFF'-OAC1KEY-OAC1K)
000000000000238C  00001002                                                 633                =A(OAC2KEY+OAC2K)
0000000000002390  FFFFEFFD                                                 634                =A(X'FFFFFFFF'-OAC2KEY-OAC2K)
0000000000002394  00C00000                                                 635                =X'00C00000'
0000000000002398  000000C0                                                 636                =X'000000C0'
000000000000239C  00000000                                                 637                =F'0'
00000000000023A0  00000001                                                 638                =F'1'
00000000000023A4  00000002                                                 639                =F'2'
00000000000023A8  00020002                                                 640                =A(OAC1K+OAC2K)
00000000000023AC  000021FC                                                 641                =A(MVCOS)
00000000000023B0  00010001                                                 642                =A(OAC1A+OAC2A)
00000000000023B4  04                                                       643                =X'04'
00000000000023B5  0C                                                       644                =X'0C'
00000000000023B6  1C                                                       645                =P'1'
                                                                           646 *
00000000000023B8                                                           647          DS    0D
                                                                           648 *
00000000000023B8  D7D9C960 D7C7F140                                        649 PRIPG1   DC    CL16'PRI-PG1'            Eyecatcher
00000000000023C8  D7D9C960 D7C7F240                                        650 PRIPG2   DC    CL16'PRI-PG2'            Eyecatcher
00000000000023D8  E2C5C360 D7C7F140                                        651 SECPG1   DC    CL16'SEC-PG1'            Eyecatcher
00000000000023E8  E2C5C360 D7C7F240                                        652 SECPG2   DC    CL16'SEC-PG2'            Eyecatcher
00000000000023F8  C8D6D460 D7C7F140                                        653 HOMPG1   DC    CL16'HOM-PG1'            Eyecatcher
0000000000002408  C8D6D460 D7C7F240                                        654 HOMPG2   DC    CL16'HOM-PG2'            Eyecatcher
                                                                           655 *
0000000000002418  C6D9D6D4 D7D9C9F1                                        656 FROMPRI  DC    CL16'FROMPRI1FROMPRI2'   Eyecatcher
0000000000002428  C6D9D6D4 E2C5C3F1                                        657 FROMSEC  DC    CL16'FROMSEC1FROMSEC2'   Eyecatcher
0000000000002438  C6D9D6D4 C8D6D4F1                                        658 FROMHOM  DC    CL16'FROMHOM1FROMHOM2'   Eyecatcher
                                                                           659 *
0000000000002448  04024000 80000000                                        660 TESTFAIL DC    X'0402400080000000',XL4'00',X'00000BAD' TEST FAILED
0000000000002458  04024000 80000000                                        661 GOODPSW  DC    X'0402400080000000',XL4'00',X'00000000' Success
0000000000002468  04024000 80000000                                        662 HALT     DC    X'04024000',X'80000000',XL4'00',X'0000000F' Abnormal end
                                                                           663 *
                                                                           664 *-- Control registers
                                                                           665 *
0000000000002478  00000000 04000000                                        666 CR0      DC    X'00000000',X'04000000' Secondary space control bit 37
0000000000002480  00000000 00004000                                        667 CR1      DC    X'00000000',A(SEGPRI)   Primary ASCE
0000000000002488  00000000 00009100                                        668 CR2      DC    X'00000000',A(DUCT)     Dispatchable Unit Ctl Table
0000000000002490  00000000 C0000001                                        669 CR3      DC    X'00000000',X'C0000001' PKM=C000, Secondary ASN=1
0000000000002498  00000000 00000000                                        670 CR4      DC    X'00000000',X'00000000' Primary ASN=0
00000000000024A0  00000000 00009000                                        671 CR5      DC    X'00000000',A(PASTEO)   Primary ASTE Origin
00000000000024A8  00000000 00000000                                        672 CR6      DC    X'00000000',X'00000000'
00000000000024B0  00000000 00005000                                        673 CR7      DC    X'00000000',A(SEGSEC)   Secondary ASCE
00000000000024B8  00000000 00000000                                        674 CR8      DC    X'00000000',X'00000000'
00000000000024C0  00000000 00000000                                        675 CR9      DC    X'00000000',X'00000000'
00000000000024C8  00000000 00000000                                        676 CR10     DC    X'00000000',X'00000000'
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    14

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000024D0  00000000 00000000                                        677 CR11     DC    X'00000000',X'00000000'
00000000000024D8  00000000 00000000                                        678 CR12     DC    X'00000000',X'00000000'
00000000000024E0  00000000 00006000                                        679 CR13     DC    X'00000000',A(SEGHOM)   Home ASCE
00000000000024E8  00000000 00000000                                        680 CR14     DC    X'00000000',X'00000000'
00000000000024F0  00000000 00000000                                        681 CR15     DC    X'00000000',X'00000000'
                                                                           682 *
00000000000024F8  00000000 00000000                                        683 AR0      DC    16F'0'                  Init for access registers
0000000000002538  00000000                                                 684 WORK     DC    F'0'                    Work area
000000000000253C  00000000                                                 685 FALET    DC    F'0'                    FROM ALET
0000000000002540  00000000                                                 686 TALET    DC    F'0'                    TO ALET
                                                                           687 *
0000000000002544  00010FF0                                                 688 VADDRTO  DC    X'00010FF0'             Virtual addr within all 3 addr
                                                                           689 *                                       space where the identifying
                                                                           690 *                                       space literal is placed
                                                                           691 *
0000000000002548  00012FF8                                                 692 VADDRFRM DC    X'00012FF8'             Virtual addr within all 3 addr
                                                                           693 *                                       space where the 'from'
                                                                           694 *                                       identifying literal is placed
                                                                           695 *
000000000000254C                                                           696 CONTROL  DS    0F                      R0 MVCOS Control bits
000000000000254C  0000                                                     697 OAC1     DS    H                        1st OAC
                                      0000000010000000  0000000000000001   698 OAC1KEY  EQU   X'10000000'               1st key
                                      0000000000020000  0000000000000001   699 OAC1K    EQU   X'00020000'               1st key validity bit
                                      0000000000010000  0000000000000001   700 OAC1A    EQU   X'00010000'               1st ASC validity bit
000000000000254E  0000                                                     701 OAC2     DS    H                        2nd OAC
                                      0000000000001000  0000000000000001   702 OAC2KEY  EQU   X'00001000'               2nd key
                                      0000000000000002  0000000000000001   703 OAC2K    EQU   X'00000002'               2nd key validity bit
                                      0000000000000001  0000000000000001   704 OAC2A    EQU   X'00000001'               2nd ASC validity bit
                                                                           705 *
                                                                           706 *-Bits in OAC1,OAC2 control bytes
                                      0000000000000100  0000000000000001   707 KEY      EQU   X'0100' .... ...1 .... ....  Key 1 set
                                      0000000000000000  0000000000000001   708 ASCPRI   EQU   X'0000' .... .... 00.. ....  Primary space
                                      0000000000000040  0000000000000001   709 ASCAR    EQU   X'0040' .... .... 01.. ....  AR
                                      0000000000000080  0000000000000001   710 ASCSEC   EQU   X'0080' .... .... 10.. ....  Secondary space
                                      00000000000000C0  0000000000000001   711 ASCHOM   EQU   X'00C0' .... .... 11.. ....  Home space
                                      0000000000000002  0000000000000001   712 ASCK     EQU   X'0002' .... .... .... ..1.  Specified key valid
                                      0000000000000001  0000000000000001   713 ASCA     EQU   X'0001' .... .... .... ...1  Specified AS valid
                                                                           714 *
                                                                           715 *
                                                                           716 *
0000000000002550  00000000                                                 717 SACIDX   DC    X'00000000'        Pri   SAC bits to set PSW 16-17=00
0000000000002554  00000200                                                 718          DC    X'00000200'        AR                              01
0000000000002558  00000100                                                 719          DC    X'00000100'        Sec                             10
000000000000255C  00000300                                                 720          DC    X'00000300'        Home                            11
                                                                           721 *
0000000000002560  00                                                       722 PSWSTATE DC    X'00'                    Tracks suprv/prob state in PSW
0000000000002561  00                                                       723 PSWASC   DC    X'00'                    Tracks ASC Mode setting of PSW
                                                                           724 *                                        in bits 4-5 of this byte
                                                                           725 *                                        during the MVCOS execution
                                                                           726 *
0000000000002562                      0000000000002562  0000000000004000   727          ORG   STRTLABL+X'4000'
0000000000004000  00000000 00007000                                        728 SEGPRI   DC    X'00000000',A(PAGPRI)
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    15

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           729 *
0000000000004008                      0000000000004008  0000000000005000   730          ORG   STRTLABL+X'5000'
0000000000005000  00000000 00007800                                        731 SEGSEC   DC    X'00000000',A(PAGSEC)
                                                                           732 *
0000000000005008                      0000000000005008  0000000000006000   733          ORG   STRTLABL+X'6000'
0000000000006000  00000000 00008000                                        734 SEGHOM   DC    X'00000000',A(PAGHOM)
                                                                           735 *
0000000000006008                      0000000000006008  0000000000007000   736          ORG   STRTLABL+X'7000'
                                      0000000000007000  0000000000000001   737 PAGPRI   EQU   *                        Primary Space Page Tables
                                                                           738 *
                                                                           739 * Addresses 0-FFFF common to all addresses spaces, VIRT=REAL
0000000000007000  00000000 00000000                                        740          DC    X'00000000',X'00000000'  R=00000  V=00000
0000000000007008  00000000 00001000                                        741          DC    X'00000000',X'00001000'  R=01000  V=01000
0000000000007010  00000000 00002000                                        742          DC    X'00000000',X'00002000'  R=02000  V=02000
0000000000007018  00000000 00003000                                        743          DC    X'00000000',X'00003000'  R=03000  V=03000
0000000000007020  00000000 00004000                                        744          DC    X'00000000',X'00004000'  R=04000  V=04000
0000000000007028  00000000 00005000                                        745          DC    X'00000000',X'00005000'  R=05000  V=05000
0000000000007030  00000000 00006000                                        746          DC    X'00000000',X'00006000'  R=06000  V=06000
0000000000007038  00000000 00007000                                        747          DC    X'00000000',X'00007000'  R=07000  V=07000
0000000000007040  00000000 00008000                                        748          DC    X'00000000',X'00008000'  R=08000  V=08000
0000000000007048  00000000 00009000                                        749          DC    X'00000000',X'00009000'  R=09000  V=09000
0000000000007050  00000000 0000A000                                        750          DC    X'00000000',X'0000A000'  R=0A000  V=0A000
0000000000007058  00000000 0000B000                                        751          DC    X'00000000',X'0000B000'  R=0B000  V=0B000
0000000000007060  00000000 0000C000                                        752          DC    X'00000000',X'0000C000'  R=0C000  V=0C000
0000000000007068  00000000 0000D000                                        753          DC    X'00000000',X'0000D000'  R=0D000  V=0D000
0000000000007070  00000000 0000E000                                        754          DC    X'00000000',X'0000E000'  R=0E000  V=0E000
0000000000007078  00000000 0000F000                                        755          DC    X'00000000',X'0000F000'  R=0F000  V=0F000
                                                                           756 *
                                                                           757 * Begin primary space only storage V-addrs 10000-1FFFF
0000000000007080  00000000 00020000                                        758          DC    X'00000000',X'00020000'  R=20000  V=10000
0000000000007088  00000000 00021000                                        759          DC    X'00000000',X'00021000'  R=21000  V=11000
0000000000007090  00000000 00022000                                        760          DC    X'00000000',X'00022000'  R=22000  V=12000
0000000000007098  00000000 00023000                                        761          DC    X'00000000',X'00023000'  R=23000  V=13000
00000000000070A0  00000000 00024000                                        762          DC    X'00000000',X'00024000'  R=24000  V=14000
00000000000070A8  00000000 00025000                                        763          DC    X'00000000',X'00025000'  R=25000  V=15000
00000000000070B0  00000000 00026000                                        764          DC    X'00000000',X'00026000'  R=26000  V=16000
00000000000070B8  00000000 00027000                                        765          DC    X'00000000',X'00027000'  R=27000  V=17000
00000000000070C0  00000000 00028000                                        766          DC    X'00000000',X'00028000'  R=28000  V=18000
00000000000070C8  00000000 00029000                                        767          DC    X'00000000',X'00029000'  R=29000  V=19000
00000000000070D0  00000000 0002A000                                        768          DC    X'00000000',X'0002A000'  R=2A000  V=1A000
00000000000070D8  00000000 0002B000                                        769          DC    X'00000000',X'0002B000'  R=2B000  V=1B000
00000000000070E0  00000000 0002C000                                        770          DC    X'00000000',X'0002C000'  R=2C000  V=1C000
00000000000070E8  00000000 0002D000                                        771          DC    X'00000000',X'0002D000'  R=2D000  V=1D000
00000000000070F0  00000000 0002E000                                        772          DC    X'00000000',X'0002E000'  R=2E000  V=1E000
00000000000070F8  00000000 0002F000                                        773          DC    X'00000000',X'0002F000'  R=2F000  V=1F000
                                                                           774 *
0000000000007100                      0000000000007100  0000000000007800   775          ORG   STRTLABL+X'7800'
                                      0000000000007800  0000000000000001   776 PAGSEC   EQU   *                        Secondary Space Page Tables
                                                                           777 *
                                                                           778 * Addresses 0-FFFF common to all addresses spaces, VIRT=REAL
0000000000007800  00000000 00000000                                        779          DC    X'00000000',X'00000000'  R=00000  V=00000
0000000000007808  00000000 00001000                                        780          DC    X'00000000',X'00001000'  R=01000  V=01000
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    16

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000007810  00000000 00002000                                        781          DC    X'00000000',X'00002000'  R=02000  V=02000
0000000000007818  00000000 00003000                                        782          DC    X'00000000',X'00003000'  R=03000  V=03000
0000000000007820  00000000 00004000                                        783          DC    X'00000000',X'00004000'  R=04000  V=04000
0000000000007828  00000000 00005000                                        784          DC    X'00000000',X'00005000'  R=05000  V=05000
0000000000007830  00000000 00006000                                        785          DC    X'00000000',X'00006000'  R=06000  V=06000
0000000000007838  00000000 00007000                                        786          DC    X'00000000',X'00007000'  R=07000  V=07000
0000000000007840  00000000 00008000                                        787          DC    X'00000000',X'00008000'  R=08000  V=08000
0000000000007848  00000000 00009000                                        788          DC    X'00000000',X'00009000'  R=09000  V=09000
0000000000007850  00000000 0000A000                                        789          DC    X'00000000',X'0000A000'  R=0A000  V=0A000
0000000000007858  00000000 0000B000                                        790          DC    X'00000000',X'0000B000'  R=0B000  V=0B000
0000000000007860  00000000 0000C000                                        791          DC    X'00000000',X'0000C000'  R=0C000  V=0C000
0000000000007868  00000000 0000D000                                        792          DC    X'00000000',X'0000D000'  R=0D000  V=0D000
0000000000007870  00000000 0000E000                                        793          DC    X'00000000',X'0000E000'  R=0E000  V=0E000
0000000000007878  00000000 0000F000                                        794          DC    X'00000000',X'0000F000'  R=0F000  V=0F000
                                                                           795 *
                                                                           796 * Begin secondary space only storage V-addrs 10000-1FFFF
0000000000007880  00000000 00030000                                        797          DC    X'00000000',X'00030000'  R=30000  V=10000
0000000000007888  00000000 00031000                                        798          DC    X'00000000',X'00031000'  R=31000  V=11000
0000000000007890  00000000 00032000                                        799          DC    X'00000000',X'00032000'  R=32000  V=12000
0000000000007898  00000000 00033000                                        800          DC    X'00000000',X'00033000'  R=33000  V=13000
00000000000078A0  00000000 00034000                                        801          DC    X'00000000',X'00034000'  R=34000  V=14000
00000000000078A8  00000000 00035000                                        802          DC    X'00000000',X'00035000'  R=35000  V=15000
00000000000078B0  00000000 00036000                                        803          DC    X'00000000',X'00036000'  R=36000  V=16000
00000000000078B8  00000000 00037000                                        804          DC    X'00000000',X'00037000'  R=37000  V=17000
00000000000078C0  00000000 00038000                                        805          DC    X'00000000',X'00038000'  R=38000  V=18000
00000000000078C8  00000000 00039000                                        806          DC    X'00000000',X'00039000'  R=39000  V=19000
00000000000078D0  00000000 0003A000                                        807          DC    X'00000000',X'0003A000'  R=3A000  V=1A000
00000000000078D8  00000000 0003B000                                        808          DC    X'00000000',X'0003B000'  R=3B000  V=1B000
00000000000078E0  00000000 0003C000                                        809          DC    X'00000000',X'0003C000'  R=3C000  V=1C000
00000000000078E8  00000000 0003D000                                        810          DC    X'00000000',X'0003D000'  R=3D000  V=1D000
00000000000078F0  00000000 0003E000                                        811          DC    X'00000000',X'0003E000'  R=3E000  V=1E000
00000000000078F8  00000000 0003F000                                        812          DC    X'00000000',X'0003F000'  R=3F000  V=1F000
                                                                           813 *
0000000000007900                      0000000000007900  0000000000008000   814          ORG   STRTLABL+X'8000'
                                      0000000000008000  0000000000000001   815 PAGHOM   EQU   *                        Home Space Page Tables
                                                                           816 *
                                                                           817 * Addresses 0-FFFF common to all addresses spaces, VIRT=REAL
0000000000008000  00000000 00000000                                        818          DC    X'00000000',X'00000000'  R=00000  V=00000
0000000000008008  00000000 00001000                                        819          DC    X'00000000',X'00001000'  R=01000  V=01000
0000000000008010  00000000 00002000                                        820          DC    X'00000000',X'00002000'  R=02000  V=02000
0000000000008018  00000000 00003000                                        821          DC    X'00000000',X'00003000'  R=03000  V=03000
0000000000008020  00000000 00004000                                        822          DC    X'00000000',X'00004000'  R=04000  V=04000
0000000000008028  00000000 00005000                                        823          DC    X'00000000',X'00005000'  R=05000  V=05000
0000000000008030  00000000 00006000                                        824          DC    X'00000000',X'00006000'  R=06000  V=06000
0000000000008038  00000000 00007000                                        825          DC    X'00000000',X'00007000'  R=07000  V=07000
0000000000008040  00000000 00008000                                        826          DC    X'00000000',X'00008000'  R=08000  V=08000
0000000000008048  00000000 00009000                                        827          DC    X'00000000',X'00009000'  R=09000  V=09000
0000000000008050  00000000 0000A000                                        828          DC    X'00000000',X'0000A000'  R=0A000  V=0A000
0000000000008058  00000000 0000B000                                        829          DC    X'00000000',X'0000B000'  R=0B000  V=0B000
0000000000008060  00000000 0000C000                                        830          DC    X'00000000',X'0000C000'  R=0C000  V=0C000
0000000000008068  00000000 0000D000                                        831          DC    X'00000000',X'0000D000'  R=0D000  V=0D000
0000000000008070  00000000 0000E000                                        832          DC    X'00000000',X'0000E000'  R=0E000  V=0E000
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    17

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000008078  00000000 0000F000                                        833          DC    X'00000000',X'0000F000'  R=0F000  V=0F000
                                                                           834 *
                                                                           835 * Begin home space only storage V-addrs 10000-1FFFF (V=R)
0000000000008080  00000000 00010000                                        836          DC    X'00000000',X'00010000'  R=10000  V=10000
0000000000008088  00000000 00011000                                        837          DC    X'00000000',X'00011000'  R=11000  V=11000
0000000000008090  00000000 00012000                                        838          DC    X'00000000',X'00012000'  R=12000  V=12000
0000000000008098  00000000 00013000                                        839          DC    X'00000000',X'00013000'  R=13000  V=13000
00000000000080A0  00000000 00014000                                        840          DC    X'00000000',X'00014000'  R=14000  V=14000
00000000000080A8  00000000 00015000                                        841          DC    X'00000000',X'00015000'  R=15000  V=15000
00000000000080B0  00000000 00016000                                        842          DC    X'00000000',X'00016000'  R=16000  V=16000
00000000000080B8  00000000 00017000                                        843          DC    X'00000000',X'00017000'  R=17000  V=17000
00000000000080C0  00000000 00018000                                        844          DC    X'00000000',X'00018000'  R=18000  V=18000
00000000000080C8  00000000 00019000                                        845          DC    X'00000000',X'00019000'  R=19000  V=19000
00000000000080D0  00000000 0001A000                                        846          DC    X'00000000',X'0001A000'  R=1A000  V=1A000
00000000000080D8  00000000 0001B000                                        847          DC    X'00000000',X'0001B000'  R=1B000  V=1B000
00000000000080E0  00000000 0001C000                                        848          DC    X'00000000',X'0001C000'  R=1C000  V=1C000
00000000000080E8  00000000 0001D000                                        849          DC    X'00000000',X'0001D000'  R=1D000  V=1D000
00000000000080F0  00000000 0001E000                                        850          DC    X'00000000',X'0001E000'  R=1E000  V=1E000
00000000000080F8  00000000 0001F000                                        851          DC    X'00000000',X'0001F000'  R=1F000  V=1F000
                                                                           852 *
                                                                           853 *
0000000000008100                      0000000000008100  0000000000009000   854          ORG   STRTLABL+X'9000'
0000000000009000                                                           855 PASTEO   DS    0XL64                    Primary ASN Second Table Entry
0000000000009000  00000000                                                 856          DC    A(0)           +0        ATO
0000000000009004  00000000                                                 857          DC    A(0)            4        AX,ATL
0000000000009008  00000000 00004000                                        858          DC    A(0),A(SEGPRI)  8        Primary ASCE (same as CR1)
0000000000009010  00000000                                                 859          DC    A(0)           16        ALD
0000000000009014  00000000                                                 860          DC    A(0)           20        ASTESN
0000000000009018  00000000                                                 861          DC    A(0)           24        LTD
000000000000901C  00000000                                                 862          DC    A(0)           28        Ctl prog use
0000000000009020  00000000                                                 863          DC    A(0)           32        Ctl prog use
0000000000009024  00000000                                                 864          DC    A(0)           36        Ctl prog use
0000000000009028  00000000                                                 865          DC    A(0)           40        unassigned
000000000000902C  00000000                                                 866          DC    A(0)           44        ASTEIN
0000000000009030  00000000                                                 867          DC    A(0)           48        unassigned
0000000000009034  00000000                                                 868          DC    A(0)           58        unassigned
0000000000009038  00000000                                                 869          DC    A(0)           56        unassigned
000000000000903C  00000000                                                 870          DC    A(0)           60        unassigned
                                                                           871 *
                                                                           872 *
                                                                           873 *
                                                                           874 * Dispatchable Unit Control Table (DUCT)
                                                                           875 *
                                                                           876 *-- This DUCT is used by the primary space programming when in
                                                                           877 *-- Access Register mode in order to use the DU-AL.
                                                                           878 *
0000000000009040                      0000000000009040  0000000000009100   879          ORG   STRTLABL+X'9100'
0000000000009100                                                           880 DUCT     DS    0XL64                    Dispatchable Unit Control Tbl
0000000000009100  00000000                                                 881          DC    A(0)     +0              BASTEO
0000000000009104  00000000                                                 882          DC    A(0)      4              SSASTEO
0000000000009108  00000000                                                 883          DC    A(0)      8              unassigned
000000000000910C  00000000                                                 884          DC    A(0)     12              SSASTESN
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    18

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000009110  00009200                                                 885 DUALD    DC    A(DUAL)  16              DU-AL origin
0000000000009114  00000000                                                 886          DC    A(0)     20              PSW key masks
0000000000009118  00000000                                                 887          DC    A(0)     24              unassigned
000000000000911C  00000000                                                 888          DC    A(0)     28              unassigned
0000000000009120  00000000                                                 889          DC    A(0)     32              Return addr high
0000000000009124  00000000                                                 890          DC    A(0)     36              Return addr low
0000000000009128  00000000                                                 891          DC    A(0)     40              unassigned
000000000000912C  00000000                                                 892          DC    A(0)     44              TRCB
0000000000009130  00000000                                                 893          DC    A(0)     48              unassigned
0000000000009134  00000000                                                 894          DC    A(0)     52              unassigned
0000000000009138  00000000                                                 895          DC    A(0)     56              unassigned
000000000000913C  00000000                                                 896          DC    A(0)     60              unassigned
                                                                           897 *
                                                                           898 *-- Dispatchable Unit - Access List (DU-AL)
                                                                           899 *
                                                                           900 *-- 8 access list entries, only entry 2 is valid (AR ALET = 2)
                                                                           901 *
0000000000009140                      0000000000009140  0000000000009200   902          ORG   STRTLABL+X'9200'
                                      0000000000009200  0000000000000001   903 DUAL     EQU   *                        DU Access List
0000000000009200  80000000 00000000                                        904 ALE0     DC    X'80',15X'00'            ALE 0 invalid
0000000000009210  80000000 00000000                                        905 ALE1     DC    X'80',15X'00'            ALE 1 invalid
                                                                           906 *
0000000000009220                                                           907 ALE2     DS    0XL16                    ALE 2 -> HOME space
0000000000009220  00000000                                                 908          DC    A(0)                     I,FO,P,ALESN,ALEAX all 0
0000000000009224  00000000                                                 909          DC    A(0)                     unassigned
0000000000009228  0000A000                                                 910          DC    A(HASTEO)                Home space ASTE Origin
000000000000922C  00000000                                                 911          DC    A(0)                     ASTESN seq # set to 0
                                                                           912 *
0000000000009230  80000000 00000000                                        913 ALE3     DC    X'80',15X'00'            ALE 3 invalid
0000000000009240  80000000 00000000                                        914 ALE4     DC    X'80',15X'00'            ALE 4 invalid
0000000000009250  80000000 00000000                                        915 ALE5     DC    X'80',15X'00'            ALE 5 invalid
0000000000009260  80000000 00000000                                        916 ALE6     DC    X'80',15X'00'            ALE 6 invalid
0000000000009270  80000000 00000000                                        917 ALE7     DC    X'80',15X'00'            ALE 7 invalid
                                                                           918 *
                                                                           919 *
                                                                           920 * The HASTE is needed for ALET 2's ALE entry above
0000000000009280                      0000000000009280  000000000000A000   921          ORG   STRTLABL+X'A000'
000000000000A000                                                           922 HASTEO   DS    0XL64                    Home ASN Second Table Entry
000000000000A000  00000000                                                 923          DC    A(0)           +0        ATO
000000000000A004  00000000                                                 924          DC    A(0)            4        AX,ATL
000000000000A008  00000000 00006000                                        925          DC    A(0),A(SEGHOM)  8        Home ASCE (same as CR13)
000000000000A010  00000000                                                 926          DC    A(0)           16        ALD
000000000000A014  00000000                                                 927          DC    A(0)           20        ASTESN
000000000000A018  00000000                                                 928          DC    A(0)           24        LTD
000000000000A01C  00000000                                                 929          DC    A(0)           28        Ctl prog use
000000000000A020  00000000                                                 930          DC    A(0)           32        Ctl prog use
000000000000A024  00000000                                                 931          DC    A(0)           36        Ctl prog use
000000000000A028  00000000                                                 932          DC    A(0)           40        unassigned
000000000000A02C  00000000                                                 933          DC    A(0)           44        ASTEIN
000000000000A030  00000000                                                 934          DC    A(0)           48        unassigned
000000000000A034  00000000                                                 935          DC    A(0)           58        unassigned
000000000000A038  00000000                                                 936          DC    A(0)           56        unassigned
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    19

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000A03C  00000000                                                 937          DC    A(0)           60        unassigned
                                                                           938 *
                                                                           939 *
                                                        0000000000002000   940          END START
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    20

     SYMBOL        TYPE   VALUE      LENGTH   DEFN  REFERENCES

ALE0                X    00009200          1   904
ALE1                X    00009210          1   905
ALE2                X    00009220         16   907
ALE3                X    00009230          1   913
ALE4                X    00009240          1   914
ALE5                X    00009250          1   915
ALE6                X    00009260          1   916
ALE7                X    00009270          1   917
AR0                 F    000024F8          4   683  287
ASC000              U    00002090          1   329  324
ASC010              U    00002094          1   332  534
ASCA                U    00000001          1   713  347  355  402  410  488  500
ASCAR               U    00000040          1   709  368  423
ASCHOM              U    000000C0          1   711  597  599  345  351  367  400  406  422
ASCK                U    00000002          1   712
ASCPRI              U    00000000          1   708
ASCSEC              U    00000080          1   710
BEGIN000            U    000021D4          1   465
BEGIN010            U    000021EA          1   473  469
CHK000              U    000021FC          1   484
CHK010              U    00002218          1   494  489
CHK020              U    00002238          1   507  501
CHK040              U    00002244          1   512
CHK100              U    00002252          1   517  514
CONTROL             F    0000254C          4   696
CR0                 X    00002478          4   666  288
CR1                 X    00002480          4   667
CR10                X    000024C8          4   676
CR11                X    000024D0          4   677
CR12                X    000024D8          4   678
CR13                X    000024E0          4   679
CR14                X    000024E8          4   680
CR15                X    000024F0          4   681
CR2                 X    00002488          4   668
CR3                 X    00002490          4   669
CR4                 X    00002498          4   670
CR5                 X    000024A0          4   671
CR6                 X    000024A8          4   672
CR7                 X    000024B0          4   673
CR8                 X    000024B8          4   674
CR9                 X    000024C0          4   675
DUAL                U    00009200          1   903  885
DUALD               A    00009110          4   885
DUCT                X    00009100         64   880  668
EXTNPSW             X    000001B0         16   250
FALET               F    0000253C          4   685  436  444
FKEY000             U    000021C4          1   457  526
FRMA000             U    0000212C          1   394  530
FRMAS000            U    00002154          1   409  529
FRMAS020            U    0000215C          1   413
FRMAS200            U    00002182          1   427  403  411
FRMAS210            U    0000218E          1   432  425
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    21

     SYMBOL        TYPE   VALUE      LENGTH   DEFN  REFERENCES

FRMAS220            U    00002192          1   435  528
FRMAS230            U    000021A8          1   443  440
FRMAS290            U    000021AC          1   446  424  430
FROMHOM             C    00002438         16   658  303
FROMPRI             C    00002418         16   656  295  510
FROMSEC             C    00002428         16   657  299
GETALET             I    000022A8          4   551  508
GOODPSW             X    00002458          8   661  538
HALT                X    00002468          4   662  612
HASTEO              X    0000A000         64   922  910
HOMPG1              C    000023F8         16   653  302
HOMPG2              C    00002408         16   654
IMAGE               1    00000000      41024     0
KEY                 U    00000100          1   707
MVCOS               U    000021FC          1   479  584
MVCOS001            J    00000000      41024   216
MVCOSOK             P    00000200          4   255  518
NEXTTEST            U    0000226A          1   524  471  607  609
OAC1                H    0000254C          2   697
OAC1A               U    00010000          1   700  341  343  367  368  595
OAC1K               U    00020000          1   699  451  453  582
OAC1KEY             U    10000000          1   698  451  453
OAC2                H    0000254E          2   701
OAC2A               U    00000001          1   704  396  398  422  423  595
OAC2K               U    00000002          1   703  459  461  582
OAC2KEY             U    00001000          1   702  459  461
PAGHOM              U    00008000          1   815  734
PAGPRI              U    00007000          1   737  728
PAGSEC              U    00007800          1   776  731
PASTEO              X    00009000         64   855  671
PGM04               U    000022D8          1   580
PGM13               U    000022FA          1   589  576
PGM13CT             U    0000232A          1   602  598
PGMEXIT             U    00002330          1   605  587
PGMFLIH             U    000022C8          1   574  252
PGMINTC             X    0000008C          4   242  575  577
PGMNPSW             X    000001D0          4   252
PGMOPSW             X    00000150         16   246  584  592
PGMSTOP             U    0000233E          1   611  578  583  585  591  593  596  600
PIC04               P    00000204          4   256  586
PIC13               P    00000208          4   257  603
PRIPG1              C    000023B8         16   649  294  521
PRIPG2              C    000023C8         16   650
PSWASC              X    00002561          1   723  309  333  336  374  429  467  487  499
PSWSTATE            X    00002560          1   722  312  321  322
R0                  U    00000000          1   218  278  283  306  340  343  344  345  347  351  355  359  362  363  366  395  398
                                                    399  400  402  406  410  414  417  418  421  450  453  454  458  461  462  488
                                                    490  495  500  503  508  581  594  597  599
R1                  U    00000001          1   219  280  283  284  322  323  333  334  335  336  340  341  342  344  359  360  361
                                                    363  366  367  368  381  382  383  384  386  389  395  396  397  399  414  415
                                                    416  418  421  422  423  436  437  438  439  441  444  450  451  452  454  458
                                                    459  460  462  474  475  477  478  486  487  490  491  492  495  496  513  522
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    22

     SYMBOL        TYPE   VALUE      LENGTH   DEFN  REFERENCES

R10                 U    0000000A          1   228  365  373  378  531
R11                 U    0000000B          1   229  346  352  532
R12                 U    0000000C          1   230  338  533
R13                 U    0000000D          1   231  330  534
R14                 U    0000000E          1   232  319  535
R15                 U    0000000F          1   233  267  268  269  270
R2                  U    00000002          1   220  272  279  285  466  467  470  474  498  499  503  504  505  508  509  510  513
                                                    519  520  521  522
R3                  U    00000003          1   221  273  456  526
R4                  U    00000004          1   222  275  448  527
R5                  U    00000005          1   223  291  294  298  302  478
R6                  U    00000006          1   224  292  295  299  303  478
R7                  U    00000007          1   225  420  428  433  528
R8                  U    00000008          1   226  401  407  529
R9                  U    00000009          1   227  393  530
RESTART             X    000001A0          4   249
SACIDX              X    00002550          4   717  474
SECPG1              C    000023D8         16   651  298
SECPG2              C    000023E8         16   652
SEGHOM              X    00006000          4   734  679  925
SEGPRI              X    00004000          4   728  667  858
SEGSEC              X    00005000          4   731  673
SET000              U    0000201C          1   282  285
SETAR               I    00002298          4   546  495
START               H    00002000          2   266  249  270  940
STATE000            U    0000207E          1   320  535
STRTLABL            U    00000000          1   217  240  244  248  254  265  727  730  733  736  775  814  854  879  902  921  236
SVCFLIH             U    000022B8          1   565  251
SVCINTC             X    00000088          4   241  468  566  590  606
SVCNPSW             X    000001C0          4   251
SVCOPSW             X    00000140         16   245  566  567
SVCSTATE            I    0000208E          2   326  323
TALET               F    00002540          4   686  381  389
TESTFAIL            X    00002448          8   660  515
TKEY000             U    000021B0          1   449  527
TOA000              U    000020A8          1   339  533
TOAS000             U    000020D0          1   354  532
TOAS020             U    000020D8          1   358
TOAS200             U    000020FE          1   372  348  356
TOAS210             U    0000210A          1   377  370
TOAS220             U    0000210E          1   380  531
TOAS230             U    00002124          1   388  385
TOAS290             U    00002128          1   391  369  375
VADDRFRM            X    00002548          4   692  292
VADDRTO             X    00002544          4   688  291  496
WORK                F    00002538          4   684  581  582  594  595
=A(ASCHOM)          A    00002378          4   628  406  416
=A(ASCHOM*65536)    A    00002358          4   620  351  361
=A(MVCOS)           A    000023AC          4   641  584  592
=A(OAC1A)           A    0000234C          4   617  341  342
=A(OAC1A+ASCAR*65536)
                    A    00002364          4   623  368
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    23

     SYMBOL        TYPE   VALUE      LENGTH   DEFN  REFERENCES

=A(OAC1A+ASCHOM*65536)
                    A    00002360          4   622  367
=A(OAC1A+OAC2A)     A    000023B0          4   642  595
=A(OAC1K+OAC2K)     A    000023A8          4   640  582
=A(OAC1KEY+OAC1K)
                    A    00002384          4   631  451  452
=A(OAC2A)           A    0000236C          4   625  396  397
=A(OAC2A+ASCAR)     A    00002380          4   630  423
=A(OAC2A+ASCHOM)    A    0000237C          4   629  422
=A(OAC2KEY+OAC2K)
                    A    0000238C          4   633  459  460
=A(X'FFFFFFFF'-(ASCHOM*65536))
                    A    00002354          4   619  345  362
=A(X'FFFFFFFF'-ASCHOM)
                    A    00002374          4   627  400  417
=A(X'FFFFFFFF'-OAC1A)
                    A    00002350          4   618  343
=A(X'FFFFFFFF'-OAC1KEY-OAC1K)
                    A    00002388          4   632  453
=A(X'FFFFFFFF'-OAC2A)
                    A    00002370          4   626  398
=A(X'FFFFFFFF'-OAC2KEY-OAC2K)
                    A    00002390          4   634  461
=F'0'               F    0000239C          4   637  546
=F'1'               F    000023A0          4   638  548
=F'2'               F    000023A4          4   639  549
=F'3'               F    00002368          4   624  384  439
=P'1'               P    000023B6          1   645  518  586  603
=X'0000000C'        X    00002348          4   616  335
=X'000000C0'        X    00002398          4   636  504
=X'00400000'        X    0000235C          4   621  360
=X'00C00000'        X    00002394          4   635  491
=X'04'              X    000023B4          1   643  289
=X'0C'              X    000023B5          1   644  470
=X'10031003'        X    00002344          4   615  306
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    24

MACRO   DEFN  REFERENCES

No defined macros
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    25

   DESC     SYMBOL    SIZE     POS        ADDR

Entry: 2000

Image      IMAGE     41024  0000-A03F  0000-A03F
  Region             41024  0000-A03F  0000-A03F
    CSECT  MVCOS001  41024  0000-A03F  0000-A03F
ASMA Ver. 0.2.0  mvcos-001.asm: Test MVCOS Instruction                                              27 Jan 2021 11:45:23  Page    26

   STMT        FILE NAME

1     D:\satk\mvcos-001.asm


** NO ERRORS FOUND **

