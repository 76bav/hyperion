ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page     1

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                             2 *
                                                                             3 ***********************************************************************
                                                                             4 *
                                                                             5 *Testcase str-001-mvst
                                                                             6 *  Test cases for variations on the MVST (Move String) instruction.
                                                                             7 *
                                                                             8 ***********************************************************************
                                                                             9 *
                                                                            10 *                        str-001-mvst.asm
                                                                            11 *
                                                                            12 * Created and placed into the public domain 2018-12-27 by Bob Polmanter.
                                                                            13 *
                                                                            14 * The MVST instruction is tested against the definition in the z/Architecture
                                                                            15 *   Principles of Operation, SA22-7832.
                                                                            16 *
                                                                            17 * Test data is assembled into this program, and some test data is
                                                                            18 * generated by this program. The test script (str-001-mvst.tst) that runs
                                                                            19 * verifies the resulting status of registers and condition codes
                                                                            20 * through Hercules R commands.
                                                                            21 *
                                                                            22 *
                                                                            23 * Tests performed with MVST (Move String):
                                                                            24 *
                                                                            25 * 1. Ensure that a non-zero bit in R0 bits 32-55 gives PIC06
                                                                            26 * 2. Simple move; no operands cross page boundary
                                                                            27 * 3. First byte moved is the termination character
                                                                            28 * 4. Operand 1 crosses page boundary
                                                                            29 * 5. Operand 2 crosses page boundary
                                                                            30 * 6. Both operands cross page boundary, operand 1 is closer to boundary
                                                                            31 * 7. Both operands cross page boundary, operand 2 is closer to boundary
                                                                            32 * 8  Both operands cross boundary, both operands are the same distance
                                                                            33 *       to the page boundary; large multipage move.
                                                                            34 *
                                                                            35 *
                                                                            36 * NOTE - the nature of the string instructions is such that this test
                                                                            37 *        case will only validate properly for the string instruction
                                                                            38 *        improvement modifications committed in December 2018.  The
                                                                            39 *        computation of the CPU determined number of bytes is an
                                                                            40 *        unpredictable number on real hardware (at least above the
                                                                            41 *        minimum value) and the method used in Hercules prior to
                                                                            42 *        instruction improvements calculated it differently than the
                                                                            43 *        improved method.  As a result, the operand registers will
                                                                            44 *        likely contain different values when compared by the test
                                                                            45 *        script due to the different CPU number of bytes
                                                                            46 *        determined.  None of the methods are wrong, and failing
                                                                            47 *        results in the test script are not necessarily wrong.
                                                                            48 *        But this program and the resulting test script comparisons
                                                                            49 *        were written for the method used by the improved string
                                                                            50 *        instructions (CLST, MVST, SRST).
                                                                            51 *
                                                                            52 *
                                                                            53 ***********************************************************************
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page     2

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                            54 *
                                                                            55 *
                                                                            56 *
                                      0000000000000000  000000000000089F    57 MVST001  START 0
                                      0000000000000000  0000000000000001    58 STRTLABL EQU   *
                                      0000000000000000  0000000000000001    59 R0       EQU   0
                                      0000000000000001  0000000000000001    60 R1       EQU   1
                                      0000000000000002  0000000000000001    61 R2       EQU   2
                                      0000000000000003  0000000000000001    62 R3       EQU   3
                                      0000000000000004  0000000000000001    63 R4       EQU   4
                                      0000000000000005  0000000000000001    64 R5       EQU   5
                                      0000000000000006  0000000000000001    65 R6       EQU   6
                                      0000000000000007  0000000000000001    66 R7       EQU   7
                                      0000000000000008  0000000000000001    67 R8       EQU   8
                                      0000000000000009  0000000000000001    68 R9       EQU   9
                                      000000000000000A  0000000000000001    69 R10      EQU   10
                                      000000000000000B  0000000000000001    70 R11      EQU   11                  **Reserved for z/CMS test rig
                                      000000000000000C  0000000000000001    71 R12      EQU   12
                                      000000000000000D  0000000000000001    72 R13      EQU   13
                                      000000000000000E  0000000000000001    73 R14      EQU   14                  **Return address for z/CMS test rig
                                      000000000000000F  0000000000000001    74 R15      EQU   15                  **Base register on z/CMS or Hyperion
                                                                            75 *
                                                                            76 *
0000000000000000                      0000000000000000                      77          USING *,R15
                                                                            78 *
                                                                            79 * Selected z/Arch low core layout
                                                                            80 *
0000000000000000                      0000000000000000  000000000000008C    81          ORG   STRTLABL+X'8C'      Program check interrution code
000000000000008C  00000000                                                  82 PGMINTC  DS    F
                                                                            83 *
                                      0000000000000150  0000000000000001    84 PGMOPSW  EQU   STRTLABL+X'150'     z/Arch Program check old PSW
                                                                            85 *
0000000000000090                      0000000000000090  00000000000001A0    86          ORG   STRTLABL+X'1A0'     z/Arch Restart PSW
00000000000001A0  00000001 80000000                                         87          DC    X'0000000180000000',A(0,START)
                                                                            88 *
00000000000001B0                      00000000000001B0  00000000000001D0    89          ORG   STRTLABL+X'1D0'     z/Arch Program check new PSW
00000000000001D0  00000001 80000000                                         90 PGMNPSW  DC    X'0000000180000000',A(0,PROGCHK)
                                                                            91 *
                                                                            92 * Program check routine.  We are looking for a single specification
                                                                            93 * exeception.  Any other program check is not expected to occur and
                                                                            94 * results in a hard wait.
                                                                            95 *
00000000000001E0                      00000000000001E0  0000000000000200    96          ORG   STRTLABL+X'200'
0000000000000200                                                            97 PROGCHK  DS    0H             Program check occured...
0000000000000200  9506 F08F                             000000000000008F    98          CLI   PGMINTC+3,X'06'  Specification?
0000000000000204  4780 F21C                             000000000000021C    99          BE    CONTINUE       Yes, this is expected (once)
0000000000000208  B2B2 F3D0                             00000000000003D0   100 HALT     LPSWE HALTPSW        Unexpected PIC, disabled wait
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page     3

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           102 ***********************************************************************
                                                                           103 *
                                                                           104 *  Main program.
                                                                           105 *
000000000000020C                                                           106 START    DS    0H
                                                                           107 *
                                                                           108 **********
                                                                           109 * TEST 1 * Ensure any non-zero bits in R0 bits 32-55 gives PIC 06
                                                                           110 **********
                                                                           111 *
000000000000020C  4100 0400                             0000000000000400   112          LA    R0,X'400'               Set invalid termination char
0000000000000210  4160 F800                             0000000000000800   113          LA    R6,DEST1                -> destination field
0000000000000214  4160 F700                             0000000000000700   114          LA    R6,SHORT                -> source field
0000000000000218  B255 0067                                                115          MVST  R6,R7                   Attempt a move, should get PIC 6
                                                                           116 *
                                      000000000000021C  0000000000000001   117 CONTINUE EQU   *
000000000000021C  D207 F1D0 F3D0      00000000000001D0  00000000000003D0   118          MVC   PGMNPSW,HALTPSW         All other p checks should halt
                                                                           119 *
                                                                           120 **********
                                                                           121 * TEST 2 * Move a short string; no page boundary crossings
                                                                           122 **********
                                                                           123 *
0000000000000222  4160 F810                             0000000000000810   124          LA    R6,DEST2                -> destination field
0000000000000226  4170 F700                             0000000000000700   125          LA    R7,SHORT                -> source field
000000000000022A  4D50 F3A4                             00000000000003A4   126          BAS   R5,MOVE                 Move the string
000000000000022E  9068 F820                             0000000000000820   127          STM   R6,R8,RESULT2           Save test 2 result regs
                                                                           128 *
                                                                           129 **********
                                                                           130 * TEST 3 * Move a single byte, which is the termination character
                                                                           131 **********
                                                                           132 *
0000000000000232  4160 F830                             0000000000000830   133          LA    R6,DEST3                -> destination field
0000000000000236  4170 F710                             0000000000000710   134          LA    R7,TERM                 -> String with only the term chr
000000000000023A  4D50 F3A4                             00000000000003A4   135          BAS   R5,MOVE                 Move the string
000000000000023E  9068 F840                             0000000000000840   136          STM   R6,R8,RESULT3           Save test 3 result regs
                                                                           137 *
                                                                           138 **********
                                                                           139 * TEST 4 * Move a string; operand 1 (only) crosses a page boundary
                                                                           140 **********
                                                                           141 *
                                                                           142 *-- First, generate a source string.  319 bytes, all FFs, + 1 $ char
                                                                           143 *
0000000000000242  5820 F724                             0000000000000724   144          L     R2,ASOURCE4             -> source string area
0000000000000246  5830 F72C                             000000000000072C   145          L     R3,ALEN4                -> get length we will build
000000000000024A  5850 F720                             0000000000000720   146          L     R5,PAD                  Get the pad char
000000000000024E  0E24                                                     147          MVCL  R2,R4                   Fill the area with FFs
0000000000000250  0620                                                     148          BCTR  R2,0                    -> last byte filled
0000000000000252  925B 2000                             0000000000000000   149          MVI   0(R2),C'$'              Plug termination character
                                                                           150 *
                                                                           151 *-- Move the string to the destination area
                                                                           152 *
0000000000000256  5860 F728                             0000000000000728   153          L     R6,ADEST4               -> destination field
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page     4

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000025A  5870 F724                             0000000000000724   154          L     R7,ASOURCE4             -> String to be moved
000000000000025E  4D50 F3A4                             00000000000003A4   155          BAS   R5,MOVE                 Move the string
0000000000000262  9068 F850                             0000000000000850   156          STM   R6,R8,RESULT4           Save test 4 result regs
                                                                           157 *
                                                                           158 *-- Finally, verify source and destination match completely
                                                                           159 *
0000000000000266  D203 F85C F711      000000000000085C  0000000000000711   160          MVC   RESULT4+12(4),FFS       Initialize later result field
000000000000026C  5820 F724                             0000000000000724   161          L     R2,ASOURCE4             -> source string area
0000000000000270  5830 F72C                             000000000000072C   162          L     R3,ALEN4                get length to validate
0000000000000274  5840 F728                             0000000000000728   163          L     R4,ADEST4               -> destination area
0000000000000278  1853                                                     164          LR    R5,R3                   Copy validation length
000000000000027A  0F24                                                     165          CLCL  R2,R4                   Check if the strings match
000000000000027C  B222 0000                                                166          IPM   R0                      Get the condition code
0000000000000280  8800 001C                             000000000000001C   167          SRL   R0,28                   Adjust CC in register
0000000000000284  5000 F85C                             000000000000085C   168          ST    R0,RESULT4+12           Put in 4th word of result
                                                                           169 *
                                                                           170 **********
                                                                           171 * TEST 5 * Move a string; operand 2 (only) crosses a page boundary
                                                                           172 **********
                                                                           173 *
                                                                           174 *-- First, generate a source string.  599 bytes, all FFs, + 1 $ char
                                                                           175 *
0000000000000288  5820 F730                             0000000000000730   176          L     R2,ASOURCE5             -> source string area
000000000000028C  5830 F738                             0000000000000738   177          L     R3,ALEN5                -> get length we will build
0000000000000290  5850 F720                             0000000000000720   178          L     R5,PAD                  Get the pad char
0000000000000294  0E24                                                     179          MVCL  R2,R4                   Fill the area with FFs
0000000000000296  0620                                                     180          BCTR  R2,0                    -> last byte filled
0000000000000298  925B 2000                             0000000000000000   181          MVI   0(R2),C'$'              Plug termination character
                                                                           182 *
                                                                           183 *-- Move the string to the destination area
                                                                           184 *
000000000000029C  5860 F734                             0000000000000734   185          L     R6,ADEST5               -> destination field
00000000000002A0  5870 F730                             0000000000000730   186          L     R7,ASOURCE5             -> String to be moved
00000000000002A4  4D50 F3A4                             00000000000003A4   187          BAS   R5,MOVE                 Move the string
00000000000002A8  9068 F860                             0000000000000860   188          STM   R6,R8,RESULT5           Save test 4 result regs
                                                                           189 *
                                                                           190 *-- Finally, verify source and destination match completely
                                                                           191 *
00000000000002AC  D203 F86C F711      000000000000086C  0000000000000711   192          MVC   RESULT5+12(4),FFS       Initialize later result field
00000000000002B2  5820 F730                             0000000000000730   193          L     R2,ASOURCE5             -> source string area
00000000000002B6  5830 F738                             0000000000000738   194          L     R3,ALEN5                get length to validate
00000000000002BA  5840 F734                             0000000000000734   195          L     R4,ADEST5               -> destination area
00000000000002BE  1853                                                     196          LR    R5,R3                   Copy validation length
00000000000002C0  0F24                                                     197          CLCL  R2,R4                   Check if the strings match
00000000000002C2  B222 0000                                                198          IPM   R0                      Get the condition code
00000000000002C6  8800 001C                             000000000000001C   199          SRL   R0,28                   Adjust CC in register
00000000000002CA  5000 F86C                             000000000000086C   200          ST    R0,RESULT5+12           Put in 4th word of result
                                                                           201 *
                                                                           202 **********
                                                                           203 * TEST 6 * Move a string; both operands cross page boundary, but
                                                                           204 ********** operand 1 is closer to the boundary than operand 2.
                                                                           205 *
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page     5

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           206 *-- First, generate a source string.  319 bytes, all FFs, + 1 $ char
                                                                           207 *
00000000000002CE  5820 F73C                             000000000000073C   208          L     R2,ASOURCE6             -> source string area
00000000000002D2  5830 F744                             0000000000000744   209          L     R3,ALEN6                -> get length we will build
00000000000002D6  5850 F720                             0000000000000720   210          L     R5,PAD                  Get the pad char
00000000000002DA  0E24                                                     211          MVCL  R2,R4                   Fill the area with FFs
00000000000002DC  0620                                                     212          BCTR  R2,0                    -> last byte filled
00000000000002DE  925B 2000                             0000000000000000   213          MVI   0(R2),C'$'              Plug termination character
                                                                           214 *
                                                                           215 *-- Move the string to the destination area
                                                                           216 *
00000000000002E2  5860 F740                             0000000000000740   217          L     R6,ADEST6               -> destination field
00000000000002E6  5870 F73C                             000000000000073C   218          L     R7,ASOURCE6             -> String to be moved
00000000000002EA  4D50 F3A4                             00000000000003A4   219          BAS   R5,MOVE                 Move the string
00000000000002EE  9068 F870                             0000000000000870   220          STM   R6,R8,RESULT6           Save test 4 result regs
                                                                           221 *
                                                                           222 *-- Finally, verify source and destination match completely
                                                                           223 *
00000000000002F2  D203 F87C F711      000000000000087C  0000000000000711   224          MVC   RESULT6+12(4),FFS       Initialize later result field
00000000000002F8  5820 F73C                             000000000000073C   225          L     R2,ASOURCE6             -> source string area
00000000000002FC  5830 F744                             0000000000000744   226          L     R3,ALEN6                get length to validate
0000000000000300  5840 F740                             0000000000000740   227          L     R4,ADEST6               -> destination area
0000000000000304  1853                                                     228          LR    R5,R3                   Copy validation length
0000000000000306  0F24                                                     229          CLCL  R2,R4                   Check if the strings match
0000000000000308  B222 0000                                                230          IPM   R0                      Get the condition code
000000000000030C  8800 001C                             000000000000001C   231          SRL   R0,28                   Adjust CC in register
0000000000000310  5000 F87C                             000000000000087C   232          ST    R0,RESULT6+12           Put in 4th word of result
                                                                           233 *
                                                                           234 **********
                                                                           235 * TEST 7 * Move a string; both operands cross page boundary, but
                                                                           236 ********** operand 2 is closer to the boundary than operand 1.
                                                                           237 *
                                                                           238 *-- First, generate a source string.  319 bytes, all FFs, + 1 $ char
                                                                           239 *
0000000000000314  5820 F748                             0000000000000748   240          L     R2,ASOURCE7             -> source string area
0000000000000318  5830 F750                             0000000000000750   241          L     R3,ALEN7                -> get length we will build
000000000000031C  5850 F720                             0000000000000720   242          L     R5,PAD                  Get the pad char
0000000000000320  0E24                                                     243          MVCL  R2,R4                   Fill the area with FFs
0000000000000322  0620                                                     244          BCTR  R2,0                    -> last byte filled
0000000000000324  925B 2000                             0000000000000000   245          MVI   0(R2),C'$'              Plug termination character
                                                                           246 *
                                                                           247 *-- Move the string to the destination area
                                                                           248 *
0000000000000328  5860 F74C                             000000000000074C   249          L     R6,ADEST7               -> destination field
000000000000032C  5870 F748                             0000000000000748   250          L     R7,ASOURCE7             -> String to be moved
0000000000000330  4D50 F3A4                             00000000000003A4   251          BAS   R5,MOVE                 Move the string
0000000000000334  9068 F880                             0000000000000880   252          STM   R6,R8,RESULT7           Save test 4 result regs
                                                                           253 *
                                                                           254 *-- Finally, verify source and destination match completely
                                                                           255 *
0000000000000338  D203 F88C F711      000000000000088C  0000000000000711   256          MVC   RESULT7+12(4),FFS       Initialize later result field
000000000000033E  5820 F748                             0000000000000748   257          L     R2,ASOURCE7             -> source string area
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page     6

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000000342  5830 F750                             0000000000000750   258          L     R3,ALEN7                get length to validate
0000000000000346  5840 F74C                             000000000000074C   259          L     R4,ADEST7               -> destination area
000000000000034A  1853                                                     260          LR    R5,R3                   Copy validation length
000000000000034C  0F24                                                     261          CLCL  R2,R4                   Check if the strings match
000000000000034E  B222 0000                                                262          IPM   R0                      Get the condition code
0000000000000352  8800 001C                             000000000000001C   263          SRL   R0,28                   Adjust CC in register
0000000000000356  5000 F88C                             000000000000088C   264          ST    R0,RESULT7+12           Put in 4th word of result
                                                                           265 *
                                                                           266 ********** Move a string; both operands cross page boundary; both
                                                                           267 * TEST 8 * operands are the same distance from a page boundary;
                                                                           268 ********** larger multipage move.
                                                                           269 *
                                                                           270 *-- First, generate a source string.  12599 bytes, all FFs, + 1 $ char
                                                                           271 *
000000000000035A  5820 F754                             0000000000000754   272          L     R2,ASOURCE8             -> source string area
000000000000035E  5830 F75C                             000000000000075C   273          L     R3,ALEN8                -> get length we will build
0000000000000362  5850 F720                             0000000000000720   274          L     R5,PAD                  Get the pad char
0000000000000366  0E24                                                     275          MVCL  R2,R4                   Fill the area with FFs
0000000000000368  0620                                                     276          BCTR  R2,0                    -> last byte filled
000000000000036A  925B 2000                             0000000000000000   277          MVI   0(R2),C'$'              Plug termination character
                                                                           278 *
                                                                           279 *-- Move the string to the destination area
                                                                           280 *
000000000000036E  5860 F758                             0000000000000758   281          L     R6,ADEST8               -> destination field
0000000000000372  5870 F754                             0000000000000754   282          L     R7,ASOURCE8             -> String to be moved
0000000000000376  4D50 F3A4                             00000000000003A4   283          BAS   R5,MOVE                 Move the string
000000000000037A  9068 F890                             0000000000000890   284          STM   R6,R8,RESULT8           Save test 4 result regs
                                                                           285 *
                                                                           286 *-- Finally, verify source and destination match completely
                                                                           287 *
000000000000037E  D203 F89C F711      000000000000089C  0000000000000711   288          MVC   RESULT8+12(4),FFS       Initialize later result field
0000000000000384  5820 F754                             0000000000000754   289          L     R2,ASOURCE8             -> source string area
0000000000000388  5830 F75C                             000000000000075C   290          L     R3,ALEN8                get length to validate
000000000000038C  5840 F758                             0000000000000758   291          L     R4,ADEST8               -> destination area
0000000000000390  1853                                                     292          LR    R5,R3                   Copy validation length
0000000000000392  0F24                                                     293          CLCL  R2,R4                   Check if the strings match
0000000000000394  B222 0000                                                294          IPM   R0                      Get the condition code
0000000000000398  8800 001C                             000000000000001C   295          SRL   R0,28                   Adjust CC in register
000000000000039C  5000 F89C                             000000000000089C   296          ST    R0,RESULT8+12           Put in 4th word of result
                                                                           297 *
00000000000003A0  B2B2 F3C0                             00000000000003C0   298          LPSWE WAITPSW                 EOJ, load disabled wait PSW
                                                                           299 *
                                                                           300 *-- MVST routine used by tests
                                                                           301 *
                                      00000000000003A4  0000000000000001   302 MOVE     EQU   *
00000000000003A4  4100 005B                             000000000000005B   303          LA    R0,C'$'                 Load termination character
00000000000003A8  1B88                                                     304          SR    R8,R8                   Init MVST counter
                                                                           305 *
                                      00000000000003AA  0000000000000001   306 INVOKE   EQU   *
00000000000003AA  B255 0067                                                307          MVST  R6,R7                   Move the string
00000000000003AE  4180 8001                             0000000000000001   308          LA    R8,1(,R8)               Count executions of MVST
00000000000003B2  4710 F3AA                             00000000000003AA   309          BC    1,INVOKE                Restart the move
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page     7

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000003B6  0745                                                     310          BCR   4,R5                    Complete if CC=1
                                                                           311 *
00000000000003B8  B222 0000                                                312          IPM   R0                      Load failing CC
00000000000003BC  B2B2 F3E0                             00000000000003E0   313          LPSWE BADCC                   Here if invalid CC encountered
                                                                           314 *
00000000000003C0                                                           315          DS    0D             Ensure correct alignment for psw
00000000000003C0  00020000 00000000                                        316 WAITPSW  DC    X'0002000000000000',A(0,0) Normal end - disabled wait
00000000000003D0  00020000 00000000                                        317 HALTPSW  DC    X'0002000000000000',XL4'00',X'0000DEAD' Abnormal end
00000000000003E0  00020000 00000000                                        318 BADCC    DC    X'0002000000000000',XL4'00',X'000BADCC' Abnormal end
                                                                           319 *
                                                                           320 *
                                                                           321 *
                                                                           322 *
00000000000003F0                      00000000000003F0  0000000000000700   323          ORG   STRTLABL+X'700'
0000000000000700  E2C8D6D9 E340E2E3                                        324 SHORT    DC    CL16'SHORT STRING$   '  Used by test 1 and 2
0000000000000710  5B                                                       325 TERM     DC    C'$'                    Used by test 3
0000000000000711  FFFFFFFF FFFFFFFF                                        326 FFS      DC    15X'FF'                 Program use
0000000000000720  FF000000                                                 327 PAD      DC    X'FF000000'             MVCL/CLCL pad char
0000000000000724  00001200                                                 328 ASOURCE4 DC    X'00001200'   op2       -> source string area (test 4)
0000000000000728  00011F10                                                 329 ADEST4   DC    X'00011F10'   op1       -> destination area (test 4)
000000000000072C  00000140                                                 330 ALEN4    DC    F'320'                  Build len source 4 (incl term)
0000000000000730  00003E02                                                 331 ASOURCE5 DC    X'00003E02'   op2       -> source string area (test 5)
0000000000000734  00013000                                                 332 ADEST5   DC    X'00013000'   op1       -> destination area (test 5)
0000000000000738  00000258                                                 333 ALEN5    DC    F'600'                  Build len source 5 (incl term)
000000000000073C  00005F80                                                 334 ASOURCE6 DC    X'00005F80'   op2       -> source string area (test 6)
0000000000000740  00015FE0                                                 335 ADEST6   DC    X'00015FE0'   op1       -> destination area (test 6)
0000000000000744  00000140                                                 336 ALEN6    DC    F'320'                  Build len source 6 (incl term)
0000000000000748  00007FC0                                                 337 ASOURCE7 DC    X'00007FC0'   op2       -> source string area (test 7)
000000000000074C  00017F90                                                 338 ADEST7   DC    X'00017F90'   op1       -> destination area (test 7)
0000000000000750  00000140                                                 339 ALEN7    DC    F'320'                  Build len source 7 (incl term)
0000000000000754  00009620                                                 340 ASOURCE8 DC    X'00009620'   op2       -> source string area (test 8)
0000000000000758  00019620                                                 341 ADEST8   DC    X'00019620'   op1       -> destination area (test 8)
000000000000075C  000030D4                                                 342 ALEN8    DC    F'12500'                Build len source 8 (incl term)
                                                                           343 *
                                                                           344 *  Locations for results
                                                                           345 *
                                                                           346 * Result fields are kept on 16-byte boundaries to more easily
                                                                           347 * track their assembled offsets for use in the .tst script.
                                                                           348 *
                                                                           349 *                              offset
0000000000000760                      0000000000000760  0000000000000800   350          ORG   STRTLABL+X'800'   8xx
0000000000000800  00000000 00000000                                        351 DEST1    DS    CL16               00   Destination area test 1
0000000000000810  00000000 00000000                                        352 DEST2    DS    CL16               10   Destination area test 2
0000000000000820  00000000 00000000                                        353 RESULT2  DS    4F                 20   Register results test 2
0000000000000830  00000000 00000000                                        354 DEST3    DS    CL16               30   Destination area test 3
0000000000000840  00000000 00000000                                        355 RESULT3  DS    4F                 40   Register results test 3
0000000000000850  00000000 00000000                                        356 RESULT4  DS    4F                 50   Register results test 4
0000000000000860  00000000 00000000                                        357 RESULT5  DS    4F                 60   Register results test 5
0000000000000870  00000000 00000000                                        358 RESULT6  DS    4F                 70   Register results test 6
0000000000000880  00000000 00000000                                        359 RESULT7  DS    4F                 80   Register results test 7
0000000000000890  00000000 00000000                                        360 RESULT8  DS    4F                 90   Register results test 8
                                                                           361 *
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page     8

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           362 *
                                                                           363 **-- Corresponding .tst script comparisons
                                                                           364 *
                                                                           365 *#                           0 1 2 3  4 5 6 7  8 9 A B  C D E F
                                                                           366 *r 008E.02
                                                                           367 *Want "PIC 06"              0006
                                                                           368 *r 0810.10
                                                                           369 *Want "DEST 2"              E2C8D6D9 E340E2E3 D9C9D5C7 5B000000
                                                                           370 *r 0820.0C
                                                                           371 *Want "Test 2 R6-R8"        0000081C 00000700 00000001
                                                                           372 *r 0830.04
                                                                           373 *Want "DEST 3"              5B000000
                                                                           374 *r 0840.0C
                                                                           375 *Want "Test 3 R6-R8"        00000830 00000710 00000001
                                                                           376 *r 0850.10
                                                                           377 *Want "Test 4 R6-R8, CC"    0001204F 000012F0 00000002 00000000
                                                                           378 *r 0860.10
                                                                           379 *Want "Test 5 R6-R8, CC"    00013257 00004000 00000002 00000000
                                                                           380 *r 0870.10
                                                                           381 *Want "Test 6 R6-R8, CC"    0001611F 00006000 00000003 00000000
                                                                           382 *r 0880.10
                                                                           383 *Want "Test 7 R6-R8, CC"    000180CF 00008030 00000003 00000000
                                                                           384 *r 0890.10
                                                                           385 *Want "Test 8 R6-R8, CC"    0001C6F3 0000C000 00000004 00000000
                                                                           386 *
                                                                           387          END
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page     9

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

ADEST4              X    000728       4   329  153  163
ADEST5              X    000734       4   332  185  195
ADEST6              X    000740       4   335  217  227
ADEST7              X    00074C       4   338  249  259
ADEST8              X    000758       4   341  281  291
ALEN4               F    00072C       4   330  145  162
ALEN5               F    000738       4   333  177  194
ALEN6               F    000744       4   336  209  226
ALEN7               F    000750       4   339  241  258
ALEN8               F    00075C       4   342  273  290
ASOURCE4            X    000724       4   328  144  154  161
ASOURCE5            X    000730       4   331  176  186  193
ASOURCE6            X    00073C       4   334  208  218  225
ASOURCE7            X    000748       4   337  240  250  257
ASOURCE8            X    000754       4   340  272  282  289
BADCC               X    0003E0       8   318  313
CONTINUE            U    00021C       1   117   99
DEST1               C    000800      16   351  113
DEST2               C    000810      16   352  124
DEST3               C    000830      16   354  133
FFS                 X    000711       1   326  160  192  224  256  288
HALT                I    000208       4   100
HALTPSW             X    0003D0       8   317  100  118
IMAGE               1    000000    2208     0
INVOKE              U    0003AA       1   306  309
MOVE                U    0003A4       1   302  126  135  155  187  219  251  283
MVST001             J    000000    2208    57
PAD                 X    000720       4   327  146  178  210  242  274
PGMINTC             F    00008C       4    82   98
PGMNPSW             X    0001D0       8    90  118
PGMOPSW             U    000150       1    84
PROGCHK             H    000200       2    97   90
R0                  U    000000       1    59  112  166  167  168  198  199  200  230  231  232  262  263  264  294  295  296  303
                                               312
R1                  U    000001       1    60
R10                 U    00000A       1    69
R11                 U    00000B       1    70
R12                 U    00000C       1    71
R13                 U    00000D       1    72
R14                 U    00000E       1    73
R15                 U    00000F       1    74   77
R2                  U    000002       1    61  144  147  148  149  161  165  176  179  180  181  193  197  208  211  212  213  225
                                               229  240  243  244  245  257  261  272  275  276  277  289  293
R3                  U    000003       1    62  145  162  164  177  194  196  209  226  228  241  258  260  273  290  292
R4                  U    000004       1    63  147  163  165  179  195  197  211  227  229  243  259  261  275  291  293
R5                  U    000005       1    64  126  135  146  155  164  178  187  196  210  219  228  242  251  260  274  283  292
                                               310
R6                  U    000006       1    65  113  114  115  124  127  133  136  153  156  185  188  217  220  249  252  281  284
                                               307
R7                  U    000007       1    66  115  125  134  154  186  218  250  282  307
R8                  U    000008       1    67  127  136  156  188  220  252  284  304  308
R9                  U    000009       1    68
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page    10

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

RESULT2             F    000820       4   353  127
RESULT3             F    000840       4   355  136
RESULT4             F    000850       4   356  156  160  168
RESULT5             F    000860       4   357  188  192  200
RESULT6             F    000870       4   358  220  224  232
RESULT7             F    000880       4   359  252  256  264
RESULT8             F    000890       4   360  284  288  296
SHORT               C    000700      16   324  114  125
START               H    00020C       2   106   87
STRTLABL            U    000000       1    58   81   84   86   89   96  323  350
TERM                C    000710       1   325  134
WAITPSW             X    0003C0       8   316  298
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page    11

MACRO   DEFN  REFERENCES

No defined macros
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page    12

   DESC     SYMBOL  SIZE    POS      ADDR

Entry: 0

Image      IMAGE    2208  000-89F  000-89F
  Region            2208  000-89F  000-89F
    CSECT  MVST001  2208  000-89F  000-89F
ASMA Ver. 0.2.0  str-001-mvst.asm: Test MVST Instruction                                            27 Dec 2018 11:34:21  Page    13

   STMT         FILE NAME

1     D:\satk\str-001-mvst.asm


** NO ERRORS FOUND **

