ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page     1

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                             2 *
                                                                             3 ***********************************************************************
                                                                             4 *
                                                                             5 *Testcase str-001-clst
                                                                             6 *  Test cases for variations on the CLST (Compare Logical String) instruction.
                                                                             7 *
                                                                             8 ***********************************************************************
                                                                             9 *
                                                                            10 *                        str-001-clst.asm
                                                                            11 *
                                                                            12 * Created and placed into the public domain 2018-12-27 by Bob Polmanter.
                                                                            13 *
                                                                            14 * The CLST instruction is tested against the definition in the z/Architecture
                                                                            15 *   Principles of Operation, SA22-7832.
                                                                            16 *
                                                                            17 * Test data is assembled into this program, and some test data is
                                                                            18 * generated by this program. The test script (str-001-clst.tst) that runs
                                                                            19 * verifies the resulting status of registers and condition codes
                                                                            20 * through Hercules R commands.
                                                                            21 *
                                                                            22 *
                                                                            23 *
                                                                            24 * Tests performed with CLST (Compare Logical String):
                                                                            25 *
                                                                            26 * 1.  Ensure that a non-zero bit in R0 bits 32-55 gives PIC06
                                                                            27 * 2.  Simple equality test; no operands cross page boundary
                                                                            28 * 3.  Operand 1 first byte is the termination character
                                                                            29 * 4.  Operand 2 first byte is the termination character
                                                                            30 * 5.  Operand 1 string "less than" operand 2 string
                                                                            31 * 6.  Operand 1 string "greater than" operand 2 string
                                                                            32 * 7.  Operand 1 string "shorter than" operand 2 string
                                                                            33 * 8.  Operand 1 string "longer than" operand 2 string
                                                                            34 * 9.  Operand 1 (only) crosses a page boundary
                                                                            35 * 10. Operand 2 (only) crosses a page boundary
                                                                            36 * 11. Both operands cross, operand 1 closer to boundary
                                                                            37 * 12. Both operands cross, operand 2 closer to boundary
                                                                            38 * 13. Both operands cross, ops equidistant, large multipage compare.
                                                                            39 *
                                                                            40 *
                                                                            41 * NOTE - the nature of the string instructions is such that this test
                                                                            42 *        case will only validate properly for the string instruction
                                                                            43 *        improvement modifications committed in December 2018.  The
                                                                            44 *        computation of the CPU determined number of bytes is an
                                                                            45 *        unpredictable number on real hardware (at least above the
                                                                            46 *        minimum value) and the method used in Hercules prior to
                                                                            47 *        instruction improvements calculated it differently than the
                                                                            48 *        improved method.  As a result, the operand registers will
                                                                            49 *        likely contain different values when compared by the test
                                                                            50 *        script due to the different CPU number of bytes
                                                                            51 *        determined.  None of the methods are wrong, and failing
                                                                            52 *        results in the test script are not necessarily wrong.
                                                                            53 *        But this program and the resulting test script comparisons
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page     2

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                            54 *        were written for the method used by the improved string
                                                                            55 *        instructions (CLST, MVST, SRST).
                                                                            56 *
                                                                            57 *
                                                                            58 ***********************************************************************
                                                                            59 *
                                                                            60 *
                                      0000000000000000  00000000000008BF    61 CLST001  START 0
                                      0000000000000000  0000000000000001    62 STRTLABL EQU   *
                                      0000000000000000  0000000000000001    63 R0       EQU   0
                                      0000000000000001  0000000000000001    64 R1       EQU   1
                                      0000000000000002  0000000000000001    65 R2       EQU   2
                                      0000000000000003  0000000000000001    66 R3       EQU   3
                                      0000000000000004  0000000000000001    67 R4       EQU   4
                                      0000000000000005  0000000000000001    68 R5       EQU   5
                                      0000000000000006  0000000000000001    69 R6       EQU   6
                                      0000000000000007  0000000000000001    70 R7       EQU   7
                                      0000000000000008  0000000000000001    71 R8       EQU   8
                                      0000000000000009  0000000000000001    72 R9       EQU   9
                                      000000000000000A  0000000000000001    73 R10      EQU   10
                                      000000000000000B  0000000000000001    74 R11      EQU   11
                                      000000000000000C  0000000000000001    75 R12      EQU   12
                                      000000000000000D  0000000000000001    76 R13      EQU   13
                                      000000000000000E  0000000000000001    77 R14      EQU   14
                                      000000000000000F  0000000000000001    78 R15      EQU   15
                                                                            79 *
                                                                            80 *
0000000000000000                      0000000000000000                      81          USING *,R15
                                                                            82 *
                                                                            83 * Selected z/Arch low core layout
                                                                            84 *
0000000000000000                      0000000000000000  000000000000008C    85          ORG   STRTLABL+X'8C'      Program check interrution code
000000000000008C  00000000                                                  86 PGMINTC  DS    F
                                                                            87 *
                                      0000000000000150  0000000000000001    88 PGMOPSW  EQU   STRTLABL+X'150'     z/Arch Program check old PSW
                                                                            89 *
0000000000000090                      0000000000000090  00000000000001A0    90          ORG   STRTLABL+X'1A0'     z/Arch Restart PSW
00000000000001A0  00000001 80000000                                         91          DC    X'0000000180000000',A(0,START)
                                                                            92 *
00000000000001B0                      00000000000001B0  00000000000001D0    93          ORG   STRTLABL+X'1D0'     z/Arch Program check new PSW
00000000000001D0  00000001 80000000                                         94 PGMNPSW  DC    X'0000000180000000',A(0,PROGCHK)
                                                                            95 *
                                                                            96 * Program check routine.  We are looking for a single specification
                                                                            97 * exeception.  Any other program check is not expected to occur and
                                                                            98 * results in a hard wait.
                                                                            99 *
00000000000001E0                      00000000000001E0  0000000000000200   100          ORG   STRTLABL+X'200'
0000000000000200                                                           101 PROGCHK  DS    0H             Program check occured...
0000000000000200  9506 F08F                             000000000000008F   102          CLI   PGMINTC+3,X'06'  Specification?
0000000000000204  4780 F21C                             000000000000021C   103          BE    CONTINUE       Yes, this is expected (once)
0000000000000208  B2B2 F350                             0000000000000350   104 HALT     LPSWE HALTPSW        Unexpected PIC, disabled wait
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page     3

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           106 ***********************************************************************
                                                                           107 *
                                                                           108 *  Main program.
                                                                           109 *
000000000000020C                                                           110 START    DS    0H
                                                                           111 *
                                                                           112 **********
                                                                           113 * TEST 1 * Ensure any non-zero bits in R0 bits 32-55 gives PIC 06
                                                                           114 **********
                                                                           115 *
000000000000020C  4100 0400                             0000000000000400   116          LA    R0,X'400'               Set invalid termination char
0000000000000210  4160 F700                             0000000000000700   117          LA    R6,SHORT1               -> short string
0000000000000214  4170 F710                             0000000000000710   118          LA    R7,SHORT2               -> another short string
0000000000000218  B25D 0067                                                119          CLST  R6,R7                   Attempt a CLST, should get PIC 6
                                                                           120 *
                                      000000000000021C  0000000000000001   121 CONTINUE EQU   *
000000000000021C  D207 F1D0 F350      00000000000001D0  0000000000000350   122          MVC   PGMNPSW,HALTPSW         Going forward, all other
                                                                           123 *                                       program checks should halt.
                                                                           124 *
                                                                           125 **********
                                                                           126 * TEST 2 * Compare short equal strings; no page boundary crossings.
                                                                           127 **********
                                                                           128 *
0000000000000222  4160 F700                             0000000000000700   129          LA    R6,SHORT1               -> string 1
0000000000000226  4170 F710                             0000000000000710   130          LA    R7,SHORT2               -> string 2
000000000000022A  4D90 F328                             0000000000000328   131          BAS   R9,COMPARE              Compare the string
000000000000022E  9068 F800                             0000000000000800   132          STM   R6,R8,RESULT2           Save test result regs
                                                                           133 *
                                                                           134 **********
                                                                           135 * TEST 3 * Compare a short string; operand 1 is the termination
                                                                           136 ********** character in the first byte.
                                                                           137 *
0000000000000232  4160 F750                             0000000000000750   138          LA    R6,TERM                 -> string 1
0000000000000236  4170 F710                             0000000000000710   139          LA    R7,SHORT2               -> string 2
000000000000023A  4D90 F328                             0000000000000328   140          BAS   R9,COMPARE              Compare the string
000000000000023E  9068 F810                             0000000000000810   141          STM   R6,R8,RESULT3           Save test result regs
                                                                           142 *
                                                                           143 **********
                                                                           144 * TEST 4 * Compare a short string; operand 2 is the termination
                                                                           145 ********** character in the first byte.
                                                                           146 *
0000000000000242  4160 F700                             0000000000000700   147          LA    R6,SHORT1               -> string 1
0000000000000246  4170 F750                             0000000000000750   148          LA    R7,TERM                 -> string 2
000000000000024A  4D90 F328                             0000000000000328   149          BAS   R9,COMPARE              Compare the string
000000000000024E  9068 F820                             0000000000000820   150          STM   R6,R8,RESULT4           Save test result regs
                                                                           151 *
                                                                           152 **********
                                                                           153 * TEST 5 * Compare a short string; operand 1 string is "lesser"
                                                                           154 ********** than the operand 2 string.
                                                                           155 *
0000000000000252  4160 F720                             0000000000000720   156          LA    R6,LESSER               -> string 1
0000000000000256  4170 F730                             0000000000000730   157          LA    R7,GREATER              -> string 2
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page     4

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000025A  4D90 F328                             0000000000000328   158          BAS   R9,COMPARE              Compare the string
000000000000025E  9068 F830                             0000000000000830   159          STM   R6,R8,RESULT5           Save test result regs
                                                                           160 *
                                                                           161 **********
                                                                           162 * TEST 6 * Compare a short string; operand 1 string is "greater"
                                                                           163 ********** than the operand 2 string.
                                                                           164 *
0000000000000262  4160 F730                             0000000000000730   165          LA    R6,GREATER              -> string 1
0000000000000266  4170 F720                             0000000000000720   166          LA    R7,LESSER               -> string 2
000000000000026A  4D90 F328                             0000000000000328   167          BAS   R9,COMPARE              Compare the string
000000000000026E  9068 F840                             0000000000000840   168          STM   R6,R8,RESULT6           Save test result regs
                                                                           169 *
                                                                           170 **********
                                                                           171 * TEST 7 * Compare a short string; operand 1 string is "shorter"
                                                                           172 ********** than the operand 2 string.
                                                                           173 *
0000000000000272  4160 F700                             0000000000000700   174          LA    R6,SHORT1               -> string 1
0000000000000276  4170 F740                             0000000000000740   175          LA    R7,LONGER               -> string 2
000000000000027A  4D90 F328                             0000000000000328   176          BAS   R9,COMPARE              Compare the string
000000000000027E  9068 F850                             0000000000000850   177          STM   R6,R8,RESULT7           Save test result regs
                                                                           178 *
                                                                           179 **********
                                                                           180 * TEST 8 * Compare a short string; operand 1 string is "longer"
                                                                           181 ********** than the operand 2 string.
                                                                           182 *
0000000000000282  4160 F740                             0000000000000740   183          LA    R6,LONGER               -> string 1
0000000000000286  4170 F710                             0000000000000710   184          LA    R7,SHORT2               -> string 2
000000000000028A  4D90 F328                             0000000000000328   185          BAS   R9,COMPARE              Compare the string
000000000000028E  9068 F860                             0000000000000860   186          STM   R6,R8,RESULT8           Save test result regs
                                                                           187 *
                                                                           188 **********
                                                                           189 * PREP   * Prepare a multi-page frame area for more lengthy compares.
                                                                           190 **********
                                                                           191 *
0000000000000292  9825 F760                             0000000000000760   192          LM    R2,R5,AREA              -> large area and length
0000000000000296  0E24                                                     193          MVCL  R2,R4                   Pad it full of X'AA'
                                                                           194 *
                                                                           195 **********
                                                                           196 * TEST 9 * Compare a string; operand 1 string crosses a
                                                                           197 ********** page boundary.
                                                                           198 *
0000000000000298  9847 F770                             0000000000000770   199          LM    R4,R7,TEST9             Get lengths and string ptrs
000000000000029C  925B 4000                             0000000000000000   200          MVI   0(R4),C'$'              Set a termination char
00000000000002A0  925B 5000                             0000000000000000   201          MVI   0(R5),C'$'              Set a termination char
00000000000002A4  4D90 F328                             0000000000000328   202          BAS   R9,COMPARE              Compare the string
00000000000002A8  9068 F870                             0000000000000870   203          STM   R6,R8,RESULT9           Save test result regs
00000000000002AC  92AA 4000                             0000000000000000   204          MVI   0(R4),X'AA'             Reset the termination char
00000000000002B0  92AA 5000                             0000000000000000   205          MVI   0(R5),X'AA'             Reset the termination char
                                                                           206 *
                                                                           207 ***********
                                                                           208 * TEST 10 * Compare a string; operand 2 string crosses a
                                                                           209 *********** page boundary.
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page     5

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           210 *
00000000000002B4  9847 F780                             0000000000000780   211          LM    R4,R7,TEST10            Get lengths and string ptrs
00000000000002B8  925B 4000                             0000000000000000   212          MVI   0(R4),C'$'              Set a termination char
00000000000002BC  925B 5000                             0000000000000000   213          MVI   0(R5),C'$'              Set a termination char
00000000000002C0  4D90 F328                             0000000000000328   214          BAS   R9,COMPARE              Compare the string
00000000000002C4  9068 F880                             0000000000000880   215          STM   R6,R8,RESULT10          Save test result regs
00000000000002C8  92AA 4000                             0000000000000000   216          MVI   0(R4),X'AA'             Reset the termination char
00000000000002CC  92AA 5000                             0000000000000000   217          MVI   0(R5),X'AA'             Reset the termination char
                                                                           218 *
                                                                           219 ***********
                                                                           220 * TEST 11 * Compare a string; both operands cross page boundaries;
                                                                           221 *********** operand 1 is closer to the boundary
                                                                           222 *
00000000000002D0  9847 F790                             0000000000000790   223          LM    R4,R7,TEST11            Get lengths and string ptrs
00000000000002D4  925B 4000                             0000000000000000   224          MVI   0(R4),C'$'              Set a termination char
00000000000002D8  925B 5000                             0000000000000000   225          MVI   0(R5),C'$'              Set a termination char
00000000000002DC  4D90 F328                             0000000000000328   226          BAS   R9,COMPARE              Compare the string
00000000000002E0  9068 F890                             0000000000000890   227          STM   R6,R8,RESULT11          Save test result regs
00000000000002E4  92AA 4000                             0000000000000000   228          MVI   0(R4),X'AA'             Reset the termination char
00000000000002E8  92AA 5000                             0000000000000000   229          MVI   0(R5),X'AA'             Reset the termination char
                                                                           230 *
                                                                           231 ***********
                                                                           232 * TEST 12 * Compare a string; both operands cross page boundaries;
                                                                           233 *********** operand 2 is closer to the boundary
                                                                           234 *
00000000000002EC  9847 F7A0                             00000000000007A0   235          LM    R4,R7,TEST12            Get lengths and string ptrs
00000000000002F0  925B 4000                             0000000000000000   236          MVI   0(R4),C'$'              Set a termination char
00000000000002F4  925B 5000                             0000000000000000   237          MVI   0(R5),C'$'              Set a termination char
00000000000002F8  4D90 F328                             0000000000000328   238          BAS   R9,COMPARE              Compare the string
00000000000002FC  9068 F8A0                             00000000000008A0   239          STM   R6,R8,RESULT12          Save test result regs
0000000000000300  92AA 4000                             0000000000000000   240          MVI   0(R4),X'AA'             Reset the termination char
0000000000000304  92AA 5000                             0000000000000000   241          MVI   0(R5),X'AA'             Reset the termination char
                                                                           242 *
                                                                           243 ***********
                                                                           244 * TEST 13 * Compare a string; both operands cross page boundaries;
                                                                           245 *********** both operands equidistant from boundary; large compare.
                                                                           246 *
0000000000000308  9847 F7B0                             00000000000007B0   247          LM    R4,R7,TEST13            Get lengths and string ptrs
000000000000030C  925B 4000                             0000000000000000   248          MVI   0(R4),C'$'              Set a termination char
0000000000000310  925B 5000                             0000000000000000   249          MVI   0(R5),C'$'              Set a termination char
0000000000000314  4D90 F328                             0000000000000328   250          BAS   R9,COMPARE              Compare the string
0000000000000318  9068 F8B0                             00000000000008B0   251          STM   R6,R8,RESULT13          Save test result regs
000000000000031C  92AA 4000                             0000000000000000   252          MVI   0(R4),X'AA'             Reset the termination char
0000000000000320  92AA 5000                             0000000000000000   253          MVI   0(R5),X'AA'             Reset the termination char
                                                                           254 *
                                                                           255 *
0000000000000324  B2B2 F340                             0000000000000340   256          LPSWE WAITPSW                 EOJ, load disabled wait PSW
                                                                           257 *
                                                                           258 *-- CLST routine used by the tests
                                                                           259 *
                                      0000000000000328  0000000000000001   260 COMPARE  EQU   *
0000000000000328  4100 005B                             000000000000005B   261          LA    R0,C'$'                 Load termination character
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page     6

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000032C  1B88                                                     262          SR    R8,R8                   Init CLST counter
                                                                           263 *
                                      000000000000032E  0000000000000001   264 INVOKE   EQU   *
000000000000032E  B25D 0067                                                265          CLST  R6,R7                   Compare the strings
0000000000000332  4180 8001                             0000000000000001   266          LA    R8,1(,R8)               Count executions of CLST
0000000000000336  4710 F32E                             000000000000032E   267          BC    1,INVOKE                Restart the compare
000000000000033A  B222 0080                                                268          IPM   R8                      Put final CC in high R8
000000000000033E  07F9                                                     269          BR    R9                      Return
                                                                           270 *
                                                                           271 *
0000000000000340                                                           272          DS    0D             Ensure correct alignment for psw
0000000000000340  00020000 00000000                                        273 WAITPSW  DC    X'0002000000000000',A(0,0) Normal end - disabled wait
0000000000000350  00020000 00000000                                        274 HALTPSW  DC    X'0002000000000000',XL4'00',X'0000DEAD' Abnormal end
                                                                           275 *
                                                                           276 *
                                                                           277 *                                      core
                                                                           278 *                                     offset
0000000000000360                      0000000000000360  0000000000000700   279          ORG   STRTLABL+X'700'         7xx
0000000000000700  E2C8D6D9 E340E2E3                                        280 SHORT1   DC    CL16'SHORT STRING$   '   00
0000000000000710  E2C8D6D9 E340E2E3                                        281 SHORT2   DC    CL16'SHORT STRING$   '   10
0000000000000720  E2E3D9C9 D5C7404C                                        282 LESSER   DC    CL16'STRING < LOW   $'   20
0000000000000730  E2E3D9C9 D5C7406E                                        283 GREATER  DC    CL16'STRING > HIGH  $'   30
0000000000000740  E2C8D6D9 E340E2E3                                        284 LONGER   DC    CL16'SHORT STRING XL$'   40
0000000000000750  5B                                                       285 TERM     DC    C'$'                     50
0000000000000751  FFFFFFFF FFFFFFFF                                        286 FFS      DC    15X'FF'                  51
                                                                           287 *
0000000000000760  00002000                                                 288 AREA     DC    X'00002000'             -> start of multi-page area
0000000000000764  00010000                                                 289 AREALEN  DC    A(4096*16)              Size of multi=page area
0000000000000768  00000000                                                 290 ZERO     DC    A(0)
000000000000076C  AA000000                                                 291 PAD      DC    X'AA000000'             MVCL pad char
                                                                           292 *
                                                                           293 *-- Storage addresses for Tests 9-13.  Four addresses are
                                                                           294 *-- provided:  where to place the termination character in
                                                                           295 *-- strings 1 and 2, and where string 1 and 2 start.
                                                                           296 *
                                                                           297 *
0000000000000770                                                           298 TEST9    DS    0F                      Op 1 (only) crosses page
0000000000000770  00003200                                                 299          DC    X'00003200'   len=x400  -> where to place term chr op 1
0000000000000774  00004500                                                 300          DC    X'00004500'   len=x400  -> where to place term chr op 2
0000000000000778  00002E00                                                 301          DC    X'00002E00'             -> start of string (operand 1)
000000000000077C  00004100                                                 302          DC    X'00004100'             -> start of string (operand 2)
                                                                           303 *
0000000000000780                                                           304 TEST10   DS    0F                      Op 2 (only) crosses page
0000000000000780  00002B00                                                 305          DC    X'00002B00'   len=x800  -> where to place term chr op 1
0000000000000784  00005100                                                 306          DC    X'00005100'   len=x800  -> where to place term chr op 2
0000000000000788  00002300                                                 307          DC    X'00002300'             -> start of string (operand 1)
000000000000078C  00004900                                                 308          DC    X'00004900'             -> start of string (operand 2)
                                                                           309 *
0000000000000790                                                           310 TEST11   DS    0F                      Both cross; Op1 closer to bound
0000000000000790  00003090                                                 311          DC    X'00003090'   len=x110  -> where to place term chr op 1
0000000000000794  00005010                                                 312          DC    X'00005010'   len=x110  -> where to place term chr op 2
0000000000000798  00002F80                                                 313          DC    X'00002F80'             -> start of string (operand 1)
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page     7

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000079C  00004F00                                                 314          DC    X'00004F00'             -> start of string (operand 2)
                                                                           315 *
00000000000007A0                                                           316 TEST12   DS    0F                      Both cross; Op2 closer to bound
00000000000007A0  00003030                                                 317          DC    X'00003030'   len=x0F0  -> where to place term chr op 1
00000000000007A4  00005070                                                 318          DC    X'00005070'   len=x0F0  -> where to place term chr op 2
00000000000007A8  00002F40                                                 319          DC    X'00002F40'             -> start of string (operand 1)
00000000000007AC  00004F80                                                 320          DC    X'00004F80'             -> start of string (operand 2)
                                                                           321 *
00000000000007B0                                                           322 TEST13   DS    0F                      Both cross; ops equidistant
00000000000007B0  00006080                                                 323          DC    X'00006080'   len=x3480 -> where to place term chr op 1
00000000000007B4  0000C080                                                 324          DC    X'0000C080'   len=x3480 -> where to place term chr op 2
00000000000007B8  00002C00                                                 325          DC    X'00002C00'             -> start of string (operand 1)
00000000000007BC  00008C00                                                 326          DC    X'00008C00'             -> start of string (operand 2)
                                                                           327 *
                                                                           328 *
                                                                           329 *  Locations for results
                                                                           330 *
                                                                           331 * Result fields are kept on 16-byte boundaries to more easily
                                                                           332 * track their assembled offsets for use in the .tst script.
                                                                           333 *
                                                                           334 *                              offset
00000000000007C0                      00000000000007C0  0000000000000800   335          ORG   STRTLABL+X'800'   8xx
0000000000000800  00000000 00000000                                        336 RESULT2  DS    4F                 00   Register results test 2
0000000000000810  00000000 00000000                                        337 RESULT3  DS    4F                 10   Register results test 3
0000000000000820  00000000 00000000                                        338 RESULT4  DS    4F                 20   Register results test 4
0000000000000830  00000000 00000000                                        339 RESULT5  DS    4F                 30   Register results test 5
0000000000000840  00000000 00000000                                        340 RESULT6  DS    4F                 40   Register results test 6
0000000000000850  00000000 00000000                                        341 RESULT7  DS    4F                 50   Register results test 7
0000000000000860  00000000 00000000                                        342 RESULT8  DS    4F                 60   Register results test 8
0000000000000870  00000000 00000000                                        343 RESULT9  DS    4F                 70   Register results test 9
0000000000000880  00000000 00000000                                        344 RESULT10 DS    4F                 80   Register results test 10
0000000000000890  00000000 00000000                                        345 RESULT11 DS    4F                 90   Register results test 11
00000000000008A0  00000000 00000000                                        346 RESULT12 DS    4F                 A0   Register results test 12
00000000000008B0  00000000 00000000                                        347 RESULT13 DS    4F                 B0   Register results test 13
                                                                           348 *
                                                                           349 *
                                                                           350 *-- Corresponding .tst script comparisons
                                                                           351 *
                                                                           352 *                            0 1 2 3  4 5 6 7  8 9 A B  C D E F
                                                                           353 *r 008E.02
                                                                           354 *Want "PIC 06"              0006
                                                                           355 *r 0800.0C
                                                                           356 *Want "Test 2 R6-R8"        00000700 00000710 00000001
                                                                           357 *r 0810.0C
                                                                           358 *Want "Test 3 R6-R8"        00000750 00000710 10000001
                                                                           359 *r 0820.0C
                                                                           360 *Want "Test 4 R6-R8"        00000700 00000750 20000001
                                                                           361 *r 0830.0C
                                                                           362 *Want "Test 5 R6-R8"        00000727 00000737 10000001
                                                                           363 *r 0840.0C
                                                                           364 *Want "Test 6 R6-R8"        00000737 00000727 20000001
                                                                           365 *r 0850.0C
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page     8

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           366 *Want "Test 7 R6-R8"        0000070C 0000074C 10000001
                                                                           367 *r 0860.0C
                                                                           368 *Want "Test 8 R6-R8"        0000074C 0000071C 20000001
                                                                           369 *r 0870.0C
                                                                           370 *Want "Test 9 R6-R8"        00003000 00004300 00000002
                                                                           371 *r 0880.0C
                                                                           372 *Want "Test 10 R6-R8"       00002A00 00005000 00000002
                                                                           373 *r 0890.0C
                                                                           374 *Want "Test 11 R6-R8"       00003080 00005000 00000002
                                                                           375 *r 08A0.0C
                                                                           376 *Want "Test 12 R6-R8"       00002F40 00004F80 00000001
                                                                           377 *r 08B0.0C
                                                                           378 *Want "Test 13 R6-R8"       00006000 0000C000 00000005
                                                                           379 *
                                                                           380          END
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page     9

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

AREA                X    000760       4   288  192
AREALEN             A    000764       4   289
CLST001             J    000000    2240    61
COMPARE             U    000328       1   260  131  140  149  158  167  176  185  202  214  226  238  250
CONTINUE            U    00021C       1   121  103
FFS                 X    000751       1   286
GREATER             C    000730      16   283  157  165
HALT                I    000208       4   104
HALTPSW             X    000350       8   274  104  122
IMAGE               1    000000    2240     0
INVOKE              U    00032E       1   264  267
LESSER              C    000720      16   282  156  166
LONGER              C    000740      16   284  175  183
PAD                 X    00076C       4   291
PGMINTC             F    00008C       4    86  102
PGMNPSW             X    0001D0       8    94  122
PGMOPSW             U    000150       1    88
PROGCHK             H    000200       2   101   94
R0                  U    000000       1    63  116  261
R1                  U    000001       1    64
R10                 U    00000A       1    73
R11                 U    00000B       1    74
R12                 U    00000C       1    75
R13                 U    00000D       1    76
R14                 U    00000E       1    77
R15                 U    00000F       1    78   81
R2                  U    000002       1    65  192  193
R3                  U    000003       1    66
R4                  U    000004       1    67  193  199  200  204  211  212  216  223  224  228  235  236  240  247  248  252
R5                  U    000005       1    68  192  201  205  213  217  225  229  237  241  249  253
R6                  U    000006       1    69  117  119  129  132  138  141  147  150  156  159  165  168  174  177  183  186  203
                                               215  227  239  251  265
R7                  U    000007       1    70  118  119  130  139  148  157  166  175  184  199  211  223  235  247  265
R8                  U    000008       1    71  132  141  150  159  168  177  186  203  215  227  239  251  262  266  268
R9                  U    000009       1    72  131  140  149  158  167  176  185  202  214  226  238  250  269
RESULT10            F    000880       4   344  215
RESULT11            F    000890       4   345  227
RESULT12            F    0008A0       4   346  239
RESULT13            F    0008B0       4   347  251
RESULT2             F    000800       4   336  132
RESULT3             F    000810       4   337  141
RESULT4             F    000820       4   338  150
RESULT5             F    000830       4   339  159
RESULT6             F    000840       4   340  168
RESULT7             F    000850       4   341  177
RESULT8             F    000860       4   342  186
RESULT9             F    000870       4   343  203
SHORT1              C    000700      16   280  117  129  147  174
SHORT2              C    000710      16   281  118  130  139  184
START               H    00020C       2   110   91
STRTLABL            U    000000       1    62   85   88   90   93  100  279  335
TERM                C    000750       1   285  138  148
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page    10

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

TEST10              F    000780       4   304  211
TEST11              F    000790       4   310  223
TEST12              F    0007A0       4   316  235
TEST13              F    0007B0       4   322  247
TEST9               F    000770       4   298  199
WAITPSW             X    000340       8   273  256
ZERO                A    000768       4   290
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page    11

MACRO   DEFN  REFERENCES

No defined macros
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page    12

   DESC     SYMBOL  SIZE    POS      ADDR

Entry: 0

Image      IMAGE    2240  000-8BF  000-8BF
  Region            2240  000-8BF  000-8BF
    CSECT  CLST001  2240  000-8BF  000-8BF
ASMA Ver. 0.2.0  str-001-clst.asm: Test CLST Instruction                                            27 Dec 2018 11:34:11  Page    13

   STMT         FILE NAME

1     D:\satk\str-001-clst.asm


** NO ERRORS FOUND **

