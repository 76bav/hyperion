ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page     1

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                             2 *
                                                                             3 ***********************************************************************
                                                                             4 *
                                                                             5 *Testcase str-001-cksm
                                                                             6 *  Test cases for variations on the CKSM (Checksum) instruction.
                                                                             7 *
                                                                             8 ***********************************************************************
                                                                             9 *
                                                                            10 *                        str-001-cksm.asm
                                                                            11 *
                                                                            12 * Created and placed into the public domain 2018-12-30 by Bob Polmanter.
                                                                            13 *
                                                                            14 * The CKSM instruction is tested against the definition in the z/Architecture
                                                                            15 *   Principles of Operation, SA22-7832.
                                                                            16 *
                                                                            17 * Test data is assembled into this program, and some test data is
                                                                            18 * generated by this program. The test script (str-001-cksm.tst) that runs
                                                                            19 * verifies the resulting status of registers and condition codes
                                                                            20 * through Hercules R commands.
                                                                            21 *
                                                                            22 *
                                                                            23 *
                                                                            24 * Tests performed with CKSM (Checksum):
                                                                            25 *
                                                                            26 * 1.  Checksum; 2nd operand does not cross page boundary,
                                                                            27 *               length is a multiple of 4.
                                                                            28 * 2.  Checksum; 2nd operand does not cross page boundary,
                                                                            29 *               length is NOT a multiple of 4.
                                                                            30 * 3.  Checksum; 2nd operand fully crosses page boundary,
                                                                            31 *               length is a multiple of 4.
                                                                            32 * 4.  Checksum; 2nd operand fully crosses page boundary,
                                                                            33 *               length is NOT a multiple of 4.
                                                                            34 * 5.  Checksum; 2nd operand ends on page boundary,
                                                                            35 *               length is a multiple of 4.
                                                                            36 * 6.  Checksum; 2nd operand ends on page boundary,
                                                                            37 *               length is NOT a multiple of 4.
                                                                            38 * 7.  Checksum; 2nd operand ends on page boundary+2,
                                                                            39 *               length is a multiple of 4.
                                                                            40 * 8.  Checksum; 2nd operand ends on page boundary+2,
                                                                            41 *               length is NOT a multiple of 4.
                                                                            42 * 9.  Checksum; 2nd operand crosses multiple pages
                                                                            43 *
                                                                            44 * NOTE: the variation between lengths with a multiple of 4 and
                                                                            45 *       not a multiple of 4 is to test the conceptual adding of
                                                                            46 *       zero values to complete the checksum with 4-byte elements
                                                                            47 *       as described in the Principles of Operation.
                                                                            48 *
                                                                            49 ***********************************************************************
                                                                            50 *
                                                                            51 *
                                      0000000000000000  000000000000088F    52 CKSM001  START 0
                                      0000000000000000  0000000000000001    53 STRTLABL EQU   *
ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page     2

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                      0000000000000000  0000000000000001    54 R0       EQU   0
                                      0000000000000001  0000000000000001    55 R1       EQU   1
                                      0000000000000002  0000000000000001    56 R2       EQU   2
                                      0000000000000003  0000000000000001    57 R3       EQU   3
                                      0000000000000004  0000000000000001    58 R4       EQU   4
                                      0000000000000005  0000000000000001    59 R5       EQU   5
                                      0000000000000006  0000000000000001    60 R6       EQU   6
                                      0000000000000007  0000000000000001    61 R7       EQU   7
                                      0000000000000008  0000000000000001    62 R8       EQU   8
                                      0000000000000009  0000000000000001    63 R9       EQU   9
                                      000000000000000A  0000000000000001    64 R10      EQU   10
                                      000000000000000B  0000000000000001    65 R11      EQU   11
                                      000000000000000C  0000000000000001    66 R12      EQU   12
                                      000000000000000D  0000000000000001    67 R13      EQU   13
                                      000000000000000E  0000000000000001    68 R14      EQU   14
                                      000000000000000F  0000000000000001    69 R15      EQU   15
                                                                            70 *
                                                                            71 *
0000000000000000                      0000000000000000                      72          USING *,R15
                                                                            73 *
                                                                            74 * Selected z/Arch low core layout
                                                                            75 *
0000000000000000                      0000000000000000  000000000000008C    76          ORG   STRTLABL+X'8C'      Program check interrution code
000000000000008C  00000000                                                  77 PGMINTC  DS    F
                                                                            78 *
                                      0000000000000150  0000000000000001    79 PGMOPSW  EQU   STRTLABL+X'150'     z/Arch Program check old PSW
                                                                            80 *
0000000000000090                      0000000000000090  00000000000001A0    81          ORG   STRTLABL+X'1A0'     z/Arch Restart PSW
00000000000001A0  00000001 80000000                                         82          DC    X'0000000180000000',A(0,START)
                                                                            83 *
00000000000001B0                      00000000000001B0  00000000000001D0    84          ORG   STRTLABL+X'1D0'     z/Arch Program check new PSW
00000000000001D0  00020000 00000000                                         85 PGMNPSW  DC    X'0002000000000000',XL4'00',X'0000DEAD' Abnormal end
                                                                            86 *
ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page     3

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                            88 ***********************************************************************
                                                                            89 *
                                                                            90 *  Main program.
                                                                            91 *
00000000000001E0                      00000000000001E0  0000000000000200    92          ORG   STRTLABL+X'200'
0000000000000200                                                            93 START    DS    0H
                                                                            94 *
                                                                            95 *
                                                                            96 **********
                                                                            97 * TEST 1 * No page boundary crossed; len=multiple of 4
                                                                            98 **********
                                                                            99 *
0000000000000200  4120 F700                             0000000000000700   100          LA    R2,TDATA1               -> buffer to checksum
0000000000000204  4130 0010                             0000000000000010   101          LA    R3,16                   Length
0000000000000208  4D90 F2BE                             00000000000002BE   102          BAS   R9,CHECKSUM             compute
000000000000020C  9013 F800                             0000000000000800   103          STM   R1,R3,RESULT1           Save test result regs
                                                                           104 *
                                                                           105 **********
                                                                           106 * TEST 2 * No page boundary crossed; len=NOT multiple of 4
                                                                           107 **********
                                                                           108 *
0000000000000210  4120 F700                             0000000000000700   109          LA    R2,TDATA1               -> buffer to checksum
0000000000000214  4130 000D                             000000000000000D   110          LA    R3,13                   Length
0000000000000218  4D90 F2BE                             00000000000002BE   111          BAS   R9,CHECKSUM             compute
000000000000021C  9013 F810                             0000000000000810   112          STM   R1,R3,RESULT2           Save test result regs
                                                                           113 *
                                                                           114 **********
                                                                           115 * TEST 3 * Page boundary crossed; len=multiple of 4
                                                                           116 **********
                                                                           117 *
0000000000000220  5820 F710                             0000000000000710   118          L     R2,BOUND1               -> where to place the buffer
0000000000000224  D20F 2000 F700      0000000000000000  0000000000000700   119          MVC   0(16,R2),TDATA1         Move data across boundary
000000000000022A  4130 0010                             0000000000000010   120          LA    R3,16                   Length
000000000000022E  4D90 F2BE                             00000000000002BE   121          BAS   R9,CHECKSUM             compute
0000000000000232  9013 F820                             0000000000000820   122          STM   R1,R3,RESULT3           Save test result regs
                                                                           123 *
                                                                           124 **********
                                                                           125 * TEST 4 * Page boundary crossed; len=NOT multiple of 4
                                                                           126 **********
                                                                           127 *
0000000000000236  5820 F710                             0000000000000710   128          L     R2,BOUND1               -> where to place the buffer
000000000000023A  D20F 2000 F700      0000000000000000  0000000000000700   129          MVC   0(16,R2),TDATA1         Move data across boundary
0000000000000240  4130 000D                             000000000000000D   130          LA    R3,13                   Length
0000000000000244  4D90 F2BE                             00000000000002BE   131          BAS   R9,CHECKSUM             compute
0000000000000248  9013 F830                             0000000000000830   132          STM   R1,R3,RESULT4           Save test result regs
                                                                           133 *
                                                                           134 **********
                                                                           135 * TEST 5 * Operand ends on a page boundary; len=multiple of 4
                                                                           136 **********
                                                                           137 *
000000000000024C  5820 F714                             0000000000000714   138          L     R2,BOUND2               -> where to place the buffer
0000000000000250  D20F 2000 F700      0000000000000000  0000000000000700   139          MVC   0(16,R2),TDATA1         Place the data
ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page     4

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000000256  4130 0010                             0000000000000010   140          LA    R3,16                   Length
000000000000025A  4D90 F2BE                             00000000000002BE   141          BAS   R9,CHECKSUM             compute
000000000000025E  9013 F840                             0000000000000840   142          STM   R1,R3,RESULT5           Save test result regs
                                                                           143 *
                                                                           144 *
                                                                           145 **********
                                                                           146 * TEST 6 * Operand ends on a page boundary; len=NOT multiple of 4
                                                                           147 **********
                                                                           148 *
0000000000000262  5820 F718                             0000000000000718   149          L     R2,BOUND3               -> where to place the buffer
0000000000000266  D20F 2000 F700      0000000000000000  0000000000000700   150          MVC   0(16,R2),TDATA1         Place the data
000000000000026C  4130 000D                             000000000000000D   151          LA    R3,13                   Length
0000000000000270  4D90 F2BE                             00000000000002BE   152          BAS   R9,CHECKSUM             compute
0000000000000274  9013 F850                             0000000000000850   153          STM   R1,R3,RESULT6           Save test result regs
                                                                           154 *
                                                                           155 **********
                                                                           156 * TEST 7 * Operand ends on a page boundary+2; len=multiple of 4
                                                                           157 **********
                                                                           158 *
0000000000000278  5820 F71C                             000000000000071C   159          L     R2,BOUND4               -> where to place the buffer
000000000000027C  D20F 2000 F700      0000000000000000  0000000000000700   160          MVC   0(16,R2),TDATA1         Place the data
0000000000000282  4130 0010                             0000000000000010   161          LA    R3,16                   Length
0000000000000286  4D90 F2BE                             00000000000002BE   162          BAS   R9,CHECKSUM             compute
000000000000028A  9013 F860                             0000000000000860   163          STM   R1,R3,RESULT7           Save test result regs
                                                                           164 *
                                                                           165 *
                                                                           166 **********
                                                                           167 * TEST 8 * Operand ends on a page boundary+2; len=NOT multiple of 4
                                                                           168 **********
                                                                           169 *
000000000000028E  5820 F720                             0000000000000720   170          L     R2,BOUND5               -> where to place the buffer
0000000000000292  D20F 2000 F700      0000000000000000  0000000000000700   171          MVC   0(16,R2),TDATA1         Place the data
0000000000000298  4130 000D                             000000000000000D   172          LA    R3,13                   Length
000000000000029C  4D90 F2BE                             00000000000002BE   173          BAS   R9,CHECKSUM             compute
00000000000002A0  9013 F870                             0000000000000870   174          STM   R1,R3,RESULT8           Save test result regs
                                                                           175 *
                                                                           176 **********
                                                                           177 * TEST 9 * Operand crosses multiple pages
                                                                           178 **********
                                                                           179 *
00000000000002A4  9825 F724                             0000000000000724   180          LM    R2,R5,AREA              Load multi-page area ptrs
00000000000002A8  0E24                                                     181          MVCL  R2,R4                   Pad the buffer area
                                                                           182 *
00000000000002AA  5820 F724                             0000000000000724   183          L     R2,AREA                 -> multipage buffer
00000000000002AE  5830 F734                             0000000000000734   184          L     R3,TEST9LEN             Length to checksum
00000000000002B2  4D90 F2BE                             00000000000002BE   185          BAS   R9,CHECKSUM             compute
00000000000002B6  9013 F880                             0000000000000880   186          STM   R1,R3,RESULT9           Save test result regs
                                                                           187 *
00000000000002BA  B2B2 F2D8                             00000000000002D8   188          LPSWE WAITPSW                 EOJ, load disabled wait PSW
                                                                           189 *
                                                                           190 *-- CKSM routine used by tests
                                                                           191 *
ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page     5

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                      00000000000002BE  0000000000000001   192 CHECKSUM EQU   *
00000000000002BE  1B11                                                     193          SR    R1,R1                   Init checksum accum
                                                                           194 *
                                      00000000000002C0  0000000000000001   195 INVOKE   EQU   *
00000000000002C0  B241 0012                                                196          CKSM  R1,R2                   Compute checksum
00000000000002C4  4740 F2D2                             00000000000002D2   197          BC    4,BADCC                 CC=1 SHOULD NEVER HAPPEN
00000000000002C8  4720 F2D2                             00000000000002D2   198          BC    2,BADCC                 CC=2 SHOULD NEVER HAPPEN
00000000000002CC  4710 F2C0                             00000000000002C0   199          BC    1,INVOKE                Restart the checksum
00000000000002D0  07F9                                                     200          BR    R9                      Return if CC=0
                                                                           201 *
00000000000002D2  B2B2 F2E8                             00000000000002E8   202 BADCC    LPSWE BADCCPSW                Stop on invalid CC
                                                                           203 *
00000000000002D8                                                           204          DS    0D             Ensure correct alignment for psw
00000000000002D8  00020000 00000000                                        205 WAITPSW  DC    X'0002000000000000',A(0,0) Normal end - disabled wait
00000000000002E8  00020000 00000000                                        206 BADCCPSW DC    X'0002000000000000',XL4'00',X'000BADCC' Abnormal end
                                                                           207 *
                                                                           208 *
                                                                           209 *
                                                                           210 *
00000000000002F8                      00000000000002F8  0000000000000700   211          ORG   STRTLABL+X'700'
                                                                           212 *
0000000000000700  00112233                                                 213 TDATA1   DC    X'00112233'             Buffer data to be checksummed
0000000000000704  44556677                                                 214          DC    X'44556677'
0000000000000708  8899AABB                                                 215          DC    X'8899AABB'
000000000000070C  CCDDEEFF                                                 216          DC    X'CCDDEEFF'
                                                                           217 *
0000000000000710  00002FFB                                                 218 BOUND1   DC    X'00002FFB'             -> data crosses boundary
0000000000000714  00002FF0                                                 219 BOUND2   DC    X'00002FF0'             -> data ends at boundary
0000000000000718  00002FF3                                                 220 BOUND3   DC    X'00002FF3'             -> data ends at boundary
000000000000071C  00002FF2                                                 221 BOUND4   DC    X'00002FF2'             -> data ends at boundary+2
0000000000000720  00002FF5                                                 222 BOUND5   DC    X'00002FF5'             -> data ends at boundary+2
                                                                           223 *
0000000000000724  00004000                                                 224 AREA     DC    X'00004000'             multi=page area
0000000000000728  00010000                                                 225 AREALEN  DC    A(4096*16)              Size of multi=page area
000000000000072C  00000000                                                 226 ZERO     DC    A(0)
0000000000000730  87000000                                                 227 PAD      DC    X'87000000'             MVCL pad char
0000000000000734  00007FF8                                                 228 TEST9LEN DC    F'32760'                Length to checksum test 9
                                                                           229 *
                                                                           230 *
                                                                           231 *
                                                                           232 *  Locations for results
                                                                           233 *
                                                                           234 * Result fields are kept on 16-byte boundaries to more easily
                                                                           235 * track their assembled offsets for use in the .tst script.
                                                                           236 *
                                                                           237 *                              offset
0000000000000738                      0000000000000738  0000000000000800   238          ORG   STRTLABL+X'800'   8xx
0000000000000800  00000000 00000000                                        239 RESULT1  DS    4F                 00   Register results test 1
0000000000000810  00000000 00000000                                        240 RESULT2  DS    4F                 10   Register results test 2
0000000000000820  00000000 00000000                                        241 RESULT3  DS    4F                 20   Register results test 3
0000000000000830  00000000 00000000                                        242 RESULT4  DS    4F                 30   Register results test 4
0000000000000840  00000000 00000000                                        243 RESULT5  DS    4F                 40   Register results test 5
ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page     6

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000000850  00000000 00000000                                        244 RESULT6  DS    4F                 50   Register results test 6
0000000000000860  00000000 00000000                                        245 RESULT7  DS    4F                 60   Register results test 7
0000000000000870  00000000 00000000                                        246 RESULT8  DS    4F                 70   Register results test 8
0000000000000880  00000000 00000000                                        247 RESULT9  DS    4F                 80   Register results test 9
                                                                           248 *
                                                                           249 *
                                                                           250 *                            0 1 2 3  4 5 6 7  8 9 A B  C D E F
                                                                           251 *r 0800.0C
                                                                           252 *Want "Test 1 R1-R3"        99DE2265 00000710 00000000
                                                                           253 *r 0810.0C
                                                                           254 *Want "Test 2 R1-R3"        99003366 0000070D 00000000
                                                                           255 *r 0820.0C
                                                                           256 *Want "Test 3 R1-R3"        99DE2265 0000300B 00000000
                                                                           257 *r 0830.0C
                                                                           258 *Want "Test 4 R1-R3"        99003366 00003008 00000000
                                                                           259 *r 0840.0C
                                                                           260 *Want "Test 5 R1-R3"        99DE2265 00003000 00000000
                                                                           261 *r 0850.0C
                                                                           262 *Want "Test 6 R1-R3"        99003366 00003000 00000000
                                                                           263 *r 0860.0C
                                                                           264 *Want "Test 7 R1-R3"        99DE2265 00003002 00000000
                                                                           265 *r 0870.0C
                                                                           266 *Want "Test 8 R1-R3"        99003366 00003002 00000000
                                                                           267 *r 0880.0C
                                                                           268 *Want "Test 9 R1-R3"        E1E1E1E1 0000BFF8 00000000
                                                                           269 *
                                                                           270          END
ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page     7

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

AREA                X    000724       4   224  180  183
AREALEN             A    000728       4   225
BADCC               I    0002D2       4   202  197  198
BADCCPSW            X    0002E8       8   206  202
BOUND1              X    000710       4   218  118  128
BOUND2              X    000714       4   219  138
BOUND3              X    000718       4   220  149
BOUND4              X    00071C       4   221  159
BOUND5              X    000720       4   222  170
CHECKSUM            U    0002BE       1   192  102  111  121  131  141  152  162  173  185
CKSM001             J    000000    2192    52
IMAGE               1    000000    2192     0
INVOKE              U    0002C0       1   195  199
PAD                 X    000730       4   227
PGMINTC             F    00008C       4    77
PGMNPSW             X    0001D0       8    85
PGMOPSW             U    000150       1    79
R0                  U    000000       1    54
R1                  U    000001       1    55  103  112  122  132  142  153  163  174  186  193  196
R10                 U    00000A       1    64
R11                 U    00000B       1    65
R12                 U    00000C       1    66
R13                 U    00000D       1    67
R14                 U    00000E       1    68
R15                 U    00000F       1    69   72
R2                  U    000002       1    56  100  109  118  119  128  129  138  139  149  150  159  160  170  171  180  181  183
                                               196
R3                  U    000003       1    57  101  103  110  112  120  122  130  132  140  142  151  153  161  163  172  174  184
                                               186
R4                  U    000004       1    58  181
R5                  U    000005       1    59  180
R6                  U    000006       1    60
R7                  U    000007       1    61
R8                  U    000008       1    62
R9                  U    000009       1    63  102  111  121  131  141  152  162  173  185  200
RESULT1             F    000800       4   239  103
RESULT2             F    000810       4   240  112
RESULT3             F    000820       4   241  122
RESULT4             F    000830       4   242  132
RESULT5             F    000840       4   243  142
RESULT6             F    000850       4   244  153
RESULT7             F    000860       4   245  163
RESULT8             F    000870       4   246  174
RESULT9             F    000880       4   247  186
START               H    000200       2    93   82
STRTLABL            U    000000       1    53   76   79   81   84   92  211  238
TDATA1              X    000700       4   213  100  109  119  129  139  150  160  171
TEST9LEN            F    000734       4   228  184
WAITPSW             X    0002D8       8   205  188
ZERO                A    00072C       4   226
ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page     8

MACRO   DEFN  REFERENCES

No defined macros
ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page     9

   DESC     SYMBOL  SIZE    POS      ADDR

Entry: 0

Image      IMAGE    2192  000-88F  000-88F
  Region            2192  000-88F  000-88F
    CSECT  CKSM001  2192  000-88F  000-88F
ASMA Ver. 0.2.0  str-001-cksm.asm: Test CKSM Instruction                                            29 Dec 2018 18:28:46  Page    10

   STMT         FILE NAME

1     D:\satk\str-001-cksm.asm


** NO ERRORS FOUND **

